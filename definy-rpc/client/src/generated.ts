/* eslint-disable */
/* generated by definy. Do not edit! */

/**
 * 認証が必要なリクエストに使用する
 */
export type AccountToken = string & { readonly __accountTokenBland: never };

/**
 * definyRpc の ApiFunctions を呼ぶ
 */
export const definyRpc: {
  /**
   * サーバー名の取得
   */
  readonly name: () => globalThis.Promise<string>;
  /**
   * get namespace list. namespace は API の公開非公開, コード生成のモジュールを分けるチャンク
   */
  readonly namespaceList: () => globalThis.Promise<globalThis.Set<undefined>>;
  /**
   * 名前から関数を検索する (公開APIのみ)
   */
  readonly functionListByName: () => globalThis.Promise<
    globalThis.ReadonlyArray<undefined>
  >;
  /**
   * 名前から関数を検索する (非公開API)
   */
  readonly functionListByNamePrivate: (
    a: AccountToken
  ) => globalThis.Promise<globalThis.ReadonlyArray<undefined>>;
  /**
   * 名前空間「definyRpc」のApiFunctionを呼ぶ TypeScript のコードを生成する
   */
  readonly generateCallDefinyRpcTypeScriptCode: () => globalThis.Promise<string>;
} = {
  name: (): globalThis.Promise<string> =>
    globalThis
      .fetch("....")
      .then((response: globalThis.Response): globalThis.Promise<string> => {
        response.json();
      })
      .catch((): globalThis.Promise<string> => {}),
  namespaceList: (): globalThis.Promise<globalThis.Set<undefined>> =>
    globalThis
      .fetch("....")
      .then(
        (
          response: globalThis.Response
        ): globalThis.Promise<globalThis.Set<undefined>> => {
          response.json();
        }
      )
      .catch((): globalThis.Promise<globalThis.Set<undefined>> => {}),
  functionListByName: (): globalThis.Promise<
    globalThis.ReadonlyArray<undefined>
  > =>
    globalThis
      .fetch("....")
      .then(
        (
          response: globalThis.Response
        ): globalThis.Promise<globalThis.ReadonlyArray<undefined>> => {
          response.json();
        }
      )
      .catch((): globalThis.Promise<globalThis.ReadonlyArray<undefined>> => {}),
  functionListByNamePrivate: (
    input: AccountToken
  ): globalThis.Promise<globalThis.ReadonlyArray<undefined>> =>
    globalThis
      .fetch("....")
      .then(
        (
          response: globalThis.Response
        ): globalThis.Promise<globalThis.ReadonlyArray<undefined>> => {
          response.json();
        }
      )
      .catch((): globalThis.Promise<globalThis.ReadonlyArray<undefined>> => {}),
  generateCallDefinyRpcTypeScriptCode: (): globalThis.Promise<string> =>
    globalThis
      .fetch("....")
      .then((response: globalThis.Response): globalThis.Promise<string> => {
        response.json();
      })
      .catch((): globalThis.Promise<string> => {}),
};

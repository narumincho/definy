// Generated by simple_dart_code_gen. Do not edit.
// ignore_for_file: camel_case_types, constant_identifier_names, always_use_package_imports
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:meta/meta.dart';
import 'package:simple_graphql_client_gen/graphql_type.dart' as graphql_type;
import 'package:simple_graphql_client_gen/query_string.dart' as query_string;

import './type.dart' as type;

/// データを取得できる. データを取得するのみで, データを変更しない
@immutable
final class Query implements query_string.GraphQLRootObject {
  /// データを取得できる. データを取得するのみで, データを変更しない
  const Query(
    this.typeName__,
    this.extra__, {
    this.now,
    this.accountByCode,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  /// サーバーでの現在時刻を取得する
  final Query_now? now;

  final Query_accountByCode? accountByCode;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, Query_Field> extra__;

  /// `Query` を複製する
  @useResult
  Query copyWith({
    String? typeName__,
    (Query_now?,)? now,
    (Query_accountByCode?,)? accountByCode,
    IMap<String, Query_Field>? extra__,
  }) {
    return Query(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      now: ((now == null) ? this.now : now.$1),
      accountByCode:
          ((accountByCode == null) ? this.accountByCode : accountByCode.$1),
    );
  }

  /// `Query` のフィールドを変更したものを新しく返す
  @useResult
  Query updateFields({
    String Function(String prevTypeName__)? typeName__,
    Query_now? Function(Query_now? prevNow)? now,
    Query_accountByCode? Function(Query_accountByCode? prevAccountByCode)?
        accountByCode,
    IMap<String, Query_Field> Function(IMap<String, Query_Field> prevExtra__)?
        extra__,
  }) {
    return Query(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      now: ((now == null) ? this.now : now(this.now)),
      accountByCode: ((accountByCode == null)
          ? this.accountByCode
          : accountByCode(this.accountByCode)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      now,
      accountByCode,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((other is Query) && (typeName__ == other.typeName__)) &&
                (now == other.now)) &&
            (accountByCode == other.accountByCode)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'Query($typeName__, $extra__, now: $now, accountByCode: $accountByCode, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (now) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (accountByCode) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return 'データを取得できる. データを取得するのみで, データを変更しない';
  }

  @override
  @useResult
  graphql_type.GraphQLRootObjectType getRootObjectType() {
    return graphql_type.GraphQLRootObjectType.query;
  }
}

/// データを取得できる. データを取得するのみで, データを変更しない
@immutable
sealed class Query_Field implements query_string.IntoGraphQLField {
  /// データを取得できる. データを取得するのみで, データを変更しない
  const Query_Field();
}

/// サーバーでの現在時刻を取得する
///
/// type: `DateTime`
@immutable
final class Query_now implements Query_Field {
  /// サーバーでの現在時刻を取得する
  ///
  /// type: `DateTime`
  const Query_now();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is Query_now;
  }

  @override
  @useResult
  String toString() {
    return 'Query_now()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'now',
      description: 'サーバーでの現在時刻を取得する',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeDateTime(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `type.Account?`
@immutable
final class Query_accountByCode implements Query_Field {
  ///
  ///
  /// type: `type.Account?`
  const Query_accountByCode(
    this.return_, {
    required this.code,
  });

  /// アカウントコード
  final query_string.VariableOrStaticValue<type.AccountCode> code;

  final Account return_;

  /// `Query_accountByCode` を複製する
  @useResult
  Query_accountByCode copyWith({
    query_string.VariableOrStaticValue<type.AccountCode>? code,
    Account? return_,
  }) {
    return Query_accountByCode(
      return_ ?? this.return_,
      code: code ?? this.code,
    );
  }

  /// `Query_accountByCode` のフィールドを変更したものを新しく返す
  @useResult
  Query_accountByCode updateFields({
    query_string.VariableOrStaticValue<type.AccountCode> Function(
            query_string.VariableOrStaticValue<type.AccountCode> prevCode)?
        code,
    Account Function(Account prevReturn_)? return_,
  }) {
    return Query_accountByCode(
      ((return_ == null) ? this.return_ : return_(this.return_)),
      code: ((code == null) ? this.code : code(this.code)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      code,
      return_,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((other is Query_accountByCode) && (code == other.code)) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'Query_accountByCode($return_, code: $code, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'accountByCode',
      args: IList([
        query_string.QueryFieldArg(
          name: 'code',
          input: codeToQueryInput(),
        )
      ]),
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }

  @useResult
  query_string.QueryInput codeToQueryInput() {
    return code.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'AccountCode',
        isNullable: false,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return staticValue.toQueryInput();
      },
    );
  }
}

/// definy のアカウント
@immutable
final class Account implements query_string.GraphQLObjectType {
  /// definy のアカウント
  const Account(
    this.typeName__,
    this.extra__, {
    this.id,
    this.code,
    this.displayName,
    this.createDateTime,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final Account_id? id;

  /// アカウントコード. ある時点では重複はしないが, 永久欠番ではない
  final Account_code? code;

  /// アカウント名. 重複する可能性あり
  final Account_displayName? displayName;

  /// アカウントが作成された日時
  final Account_createDateTime? createDateTime;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, Account_Field> extra__;

  /// `Account` を複製する
  @useResult
  Account copyWith({
    String? typeName__,
    (Account_id?,)? id,
    (Account_code?,)? code,
    (Account_displayName?,)? displayName,
    (Account_createDateTime?,)? createDateTime,
    IMap<String, Account_Field>? extra__,
  }) {
    return Account(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      id: ((id == null) ? this.id : id.$1),
      code: ((code == null) ? this.code : code.$1),
      displayName: ((displayName == null) ? this.displayName : displayName.$1),
      createDateTime:
          ((createDateTime == null) ? this.createDateTime : createDateTime.$1),
    );
  }

  /// `Account` のフィールドを変更したものを新しく返す
  @useResult
  Account updateFields({
    String Function(String prevTypeName__)? typeName__,
    Account_id? Function(Account_id? prevId)? id,
    Account_code? Function(Account_code? prevCode)? code,
    Account_displayName? Function(Account_displayName? prevDisplayName)?
        displayName,
    Account_createDateTime? Function(
            Account_createDateTime? prevCreateDateTime)?
        createDateTime,
    IMap<String, Account_Field> Function(
            IMap<String, Account_Field> prevExtra__)?
        extra__,
  }) {
    return Account(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      id: ((id == null) ? this.id : id(this.id)),
      code: ((code == null) ? this.code : code(this.code)),
      displayName: ((displayName == null)
          ? this.displayName
          : displayName(this.displayName)),
      createDateTime: ((createDateTime == null)
          ? this.createDateTime
          : createDateTime(this.createDateTime)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      id,
      code,
      displayName,
      createDateTime,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((((other is Account) && (typeName__ == other.typeName__)) &&
                        (id == other.id)) &&
                    (code == other.code)) &&
                (displayName == other.displayName)) &&
            (createDateTime == other.createDateTime)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'Account($typeName__, $extra__, id: $id, code: $code, displayName: $displayName, createDateTime: $createDateTime, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (id) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (code) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (displayName) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (createDateTime) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return 'definy のアカウント';
  }
}

/// definy のアカウント
@immutable
sealed class Account_Field implements query_string.IntoGraphQLField {
  /// definy のアカウント
  const Account_Field();
}

///
///
/// type: `type.AccountId`
@immutable
final class Account_id implements Account_Field {
  ///
  ///
  /// type: `type.AccountId`
  const Account_id();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is Account_id;
  }

  @override
  @useResult
  String toString() {
    return 'Account_id()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'id',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('AccountId'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// アカウントコード. ある時点では重複はしないが, 永久欠番ではない
///
/// type: `type.AccountCode`
@immutable
final class Account_code implements Account_Field {
  /// アカウントコード. ある時点では重複はしないが, 永久欠番ではない
  ///
  /// type: `type.AccountCode`
  const Account_code();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is Account_code;
  }

  @override
  @useResult
  String toString() {
    return 'Account_code()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'code',
      description: 'アカウントコード. ある時点では重複はしないが, 永久欠番ではない',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('AccountCode'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// アカウント名. 重複する可能性あり
///
/// type: `type.AccountDisplayName`
@immutable
final class Account_displayName implements Account_Field {
  /// アカウント名. 重複する可能性あり
  ///
  /// type: `type.AccountDisplayName`
  const Account_displayName();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is Account_displayName;
  }

  @override
  @useResult
  String toString() {
    return 'Account_displayName()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'displayName',
      description: 'アカウント名. 重複する可能性あり',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('AccountDisplayName'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// アカウントが作成された日時
///
/// type: `DateTime`
@immutable
final class Account_createDateTime implements Account_Field {
  /// アカウントが作成された日時
  ///
  /// type: `DateTime`
  const Account_createDateTime();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is Account_createDateTime;
  }

  @override
  @useResult
  String toString() {
    return 'Account_createDateTime()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'createDateTime',
      description: 'アカウントが作成された日時',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeDateTime(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// データを作成、更新ができる
@immutable
final class Mutation implements query_string.GraphQLRootObject {
  /// データを作成、更新ができる
  const Mutation(
    this.typeName__,
    this.extra__, {
    this.createAccount,
    this.createTotpKey,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  /// アカウントを作成する
  final Mutation_createAccount? createAccount;

  /// TOTPのキーを生成してデータベースに保存する
  final Mutation_createTotpKey? createTotpKey;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, Mutation_Field> extra__;

  /// `Mutation` を複製する
  @useResult
  Mutation copyWith({
    String? typeName__,
    (Mutation_createAccount?,)? createAccount,
    (Mutation_createTotpKey?,)? createTotpKey,
    IMap<String, Mutation_Field>? extra__,
  }) {
    return Mutation(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      createAccount:
          ((createAccount == null) ? this.createAccount : createAccount.$1),
      createTotpKey:
          ((createTotpKey == null) ? this.createTotpKey : createTotpKey.$1),
    );
  }

  /// `Mutation` のフィールドを変更したものを新しく返す
  @useResult
  Mutation updateFields({
    String Function(String prevTypeName__)? typeName__,
    Mutation_createAccount? Function(Mutation_createAccount? prevCreateAccount)?
        createAccount,
    Mutation_createTotpKey? Function(Mutation_createTotpKey? prevCreateTotpKey)?
        createTotpKey,
    IMap<String, Mutation_Field> Function(
            IMap<String, Mutation_Field> prevExtra__)?
        extra__,
  }) {
    return Mutation(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      createAccount: ((createAccount == null)
          ? this.createAccount
          : createAccount(this.createAccount)),
      createTotpKey: ((createTotpKey == null)
          ? this.createTotpKey
          : createTotpKey(this.createTotpKey)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      createAccount,
      createTotpKey,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((other is Mutation) && (typeName__ == other.typeName__)) &&
                (createAccount == other.createAccount)) &&
            (createTotpKey == other.createTotpKey)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'Mutation($typeName__, $extra__, createAccount: $createAccount, createTotpKey: $createTotpKey, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (createAccount) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (createTotpKey) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return 'データを作成、更新ができる';
  }

  @override
  @useResult
  graphql_type.GraphQLRootObjectType getRootObjectType() {
    return graphql_type.GraphQLRootObjectType.mutation;
  }
}

/// データを作成、更新ができる
@immutable
sealed class Mutation_Field implements query_string.IntoGraphQLField {
  /// データを作成、更新ができる
  const Mutation_Field();
}

/// アカウントを作成する
///
/// type: `type.CreateAccountResult`
@immutable
final class Mutation_createAccount implements Mutation_Field {
  /// アカウントを作成する
  ///
  /// type: `type.CreateAccountResult`
  const Mutation_createAccount(
    this.return_, {
    required this.totpKeyId,
    required this.totpCode,
    required this.accountCode,
    this.displayName = const query_string.StaticValue(null),
  });

  /// TOTPのキーID
  final query_string.VariableOrStaticValue<type.TotpKeyId> totpKeyId;

  /// TOTPのコード
  final query_string.VariableOrStaticValue<type.TotpCode> totpCode;

  /// アカウントコード. 既存のアカウントと重複してはいけない
  final query_string.VariableOrStaticValue<type.AccountCode> accountCode;

  /// アカウントの表示名
  final query_string.VariableOrStaticValue<type.AccountDisplayName?>
      displayName;

  final CreateAccountResult return_;

  /// `Mutation_createAccount` を複製する
  @useResult
  Mutation_createAccount copyWith({
    query_string.VariableOrStaticValue<type.TotpKeyId>? totpKeyId,
    query_string.VariableOrStaticValue<type.TotpCode>? totpCode,
    query_string.VariableOrStaticValue<type.AccountCode>? accountCode,
    query_string.VariableOrStaticValue<type.AccountDisplayName?>? displayName,
    CreateAccountResult? return_,
  }) {
    return Mutation_createAccount(
      return_ ?? this.return_,
      totpKeyId: totpKeyId ?? this.totpKeyId,
      totpCode: totpCode ?? this.totpCode,
      accountCode: accountCode ?? this.accountCode,
      displayName: displayName ?? this.displayName,
    );
  }

  /// `Mutation_createAccount` のフィールドを変更したものを新しく返す
  @useResult
  Mutation_createAccount updateFields({
    query_string.VariableOrStaticValue<type.TotpKeyId> Function(
            query_string.VariableOrStaticValue<type.TotpKeyId> prevTotpKeyId)?
        totpKeyId,
    query_string.VariableOrStaticValue<type.TotpCode> Function(
            query_string.VariableOrStaticValue<type.TotpCode> prevTotpCode)?
        totpCode,
    query_string.VariableOrStaticValue<type.AccountCode> Function(
            query_string.VariableOrStaticValue<type.AccountCode>
                prevAccountCode)?
        accountCode,
    query_string.VariableOrStaticValue<type.AccountDisplayName?> Function(
            query_string.VariableOrStaticValue<type.AccountDisplayName?>
                prevDisplayName)?
        displayName,
    CreateAccountResult Function(CreateAccountResult prevReturn_)? return_,
  }) {
    return Mutation_createAccount(
      ((return_ == null) ? this.return_ : return_(this.return_)),
      totpKeyId:
          ((totpKeyId == null) ? this.totpKeyId : totpKeyId(this.totpKeyId)),
      totpCode: ((totpCode == null) ? this.totpCode : totpCode(this.totpCode)),
      accountCode: ((accountCode == null)
          ? this.accountCode
          : accountCode(this.accountCode)),
      displayName: ((displayName == null)
          ? this.displayName
          : displayName(this.displayName)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      totpKeyId,
      totpCode,
      accountCode,
      displayName,
      return_,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (((((other is Mutation_createAccount) &&
                        (totpKeyId == other.totpKeyId)) &&
                    (totpCode == other.totpCode)) &&
                (accountCode == other.accountCode)) &&
            (displayName == other.displayName)) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'Mutation_createAccount($return_, totpKeyId: $totpKeyId, totpCode: $totpCode, accountCode: $accountCode, displayName: $displayName, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'createAccount',
      args: IList([
        query_string.QueryFieldArg(
          name: 'totpKeyId',
          input: totpKeyIdToQueryInput(),
        ),
        query_string.QueryFieldArg(
          name: 'totpCode',
          input: totpCodeToQueryInput(),
        ),
        query_string.QueryFieldArg(
          name: 'accountCode',
          input: accountCodeToQueryInput(),
        ),
        query_string.QueryFieldArg(
          name: 'displayName',
          input: displayNameToQueryInput(),
        ),
      ]),
      description: 'アカウントを作成する',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }

  @useResult
  query_string.QueryInput totpKeyIdToQueryInput() {
    return totpKeyId.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'TotpKeyId',
        isNullable: false,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return staticValue.toQueryInput();
      },
    );
  }

  @useResult
  query_string.QueryInput totpCodeToQueryInput() {
    return totpCode.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'TotpCode',
        isNullable: false,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return staticValue.toQueryInput();
      },
    );
  }

  @useResult
  query_string.QueryInput accountCodeToQueryInput() {
    return accountCode.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'AccountCode',
        isNullable: false,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return staticValue.toQueryInput();
      },
    );
  }

  @useResult
  query_string.QueryInput displayNameToQueryInput() {
    return displayName.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'AccountDisplayName',
        isNullable: true,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return switch (staticValue) {
          null => const query_string.QueryInputNull(),
          final nonNull => nonNull.toQueryInput(),
        };
      },
    );
  }
}

/// TOTPのキーを生成してデータベースに保存する
///
/// type: `type.TotpKey`
@immutable
final class Mutation_createTotpKey implements Mutation_Field {
  /// TOTPのキーを生成してデータベースに保存する
  ///
  /// type: `type.TotpKey`
  const Mutation_createTotpKey(
    this.return_,
  );
  final TotpKey return_;

  /// `Mutation_createTotpKey` を複製する
  @useResult
  Mutation_createTotpKey copyWith({
    TotpKey? return_,
  }) {
    return Mutation_createTotpKey(return_ ?? this.return_);
  }

  /// `Mutation_createTotpKey` のフィールドを変更したものを新しく返す
  @useResult
  Mutation_createTotpKey updateFields({
    TotpKey Function(TotpKey prevReturn_)? return_,
  }) {
    return Mutation_createTotpKey(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is Mutation_createTotpKey) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'Mutation_createTotpKey($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'createTotpKey',
      description: 'TOTPのキーを生成してデータベースに保存する',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

@immutable
final class CreateAccountResult implements query_string.GraphQLObjectType {
  const CreateAccountResult({
    this.name = 'CreateAccountResult',
    required this.createAccountNotFoundTotpKeyId,
    required this.createAccountDuplicateCode,
    required this.createAccountInvalidCode,
    required this.createAccountResultOk,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意! ※Nameという名前の型が定義されていた場合は...想定外
  final String name;

  final CreateAccountNotFoundTotpKeyId createAccountNotFoundTotpKeyId;

  final CreateAccountDuplicateCode createAccountDuplicateCode;

  final CreateAccountInvalidCode createAccountInvalidCode;

  final CreateAccountResultOk createAccountResultOk;

  /// `CreateAccountResult` を複製する
  @useResult
  CreateAccountResult copyWith({
    String? name,
    CreateAccountNotFoundTotpKeyId? createAccountNotFoundTotpKeyId,
    CreateAccountDuplicateCode? createAccountDuplicateCode,
    CreateAccountInvalidCode? createAccountInvalidCode,
    CreateAccountResultOk? createAccountResultOk,
  }) {
    return CreateAccountResult(
      name: name ?? this.name,
      createAccountNotFoundTotpKeyId:
          createAccountNotFoundTotpKeyId ?? this.createAccountNotFoundTotpKeyId,
      createAccountDuplicateCode:
          createAccountDuplicateCode ?? this.createAccountDuplicateCode,
      createAccountInvalidCode:
          createAccountInvalidCode ?? this.createAccountInvalidCode,
      createAccountResultOk:
          createAccountResultOk ?? this.createAccountResultOk,
    );
  }

  /// `CreateAccountResult` のフィールドを変更したものを新しく返す
  @useResult
  CreateAccountResult updateFields({
    String Function(String prevName)? name,
    CreateAccountNotFoundTotpKeyId Function(
            CreateAccountNotFoundTotpKeyId prevCreateAccountNotFoundTotpKeyId)?
        createAccountNotFoundTotpKeyId,
    CreateAccountDuplicateCode Function(
            CreateAccountDuplicateCode prevCreateAccountDuplicateCode)?
        createAccountDuplicateCode,
    CreateAccountInvalidCode Function(
            CreateAccountInvalidCode prevCreateAccountInvalidCode)?
        createAccountInvalidCode,
    CreateAccountResultOk Function(
            CreateAccountResultOk prevCreateAccountResultOk)?
        createAccountResultOk,
  }) {
    return CreateAccountResult(
      name: ((name == null) ? this.name : name(this.name)),
      createAccountNotFoundTotpKeyId: ((createAccountNotFoundTotpKeyId == null)
          ? this.createAccountNotFoundTotpKeyId
          : createAccountNotFoundTotpKeyId(
              this.createAccountNotFoundTotpKeyId)),
      createAccountDuplicateCode: ((createAccountDuplicateCode == null)
          ? this.createAccountDuplicateCode
          : createAccountDuplicateCode(this.createAccountDuplicateCode)),
      createAccountInvalidCode: ((createAccountInvalidCode == null)
          ? this.createAccountInvalidCode
          : createAccountInvalidCode(this.createAccountInvalidCode)),
      createAccountResultOk: ((createAccountResultOk == null)
          ? this.createAccountResultOk
          : createAccountResultOk(this.createAccountResultOk)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      name,
      createAccountNotFoundTotpKeyId,
      createAccountDuplicateCode,
      createAccountInvalidCode,
      createAccountResultOk,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (((((other is CreateAccountResult) && (name == other.name)) &&
                    (createAccountNotFoundTotpKeyId ==
                        other.createAccountNotFoundTotpKeyId)) &&
                (createAccountDuplicateCode ==
                    other.createAccountDuplicateCode)) &&
            (createAccountInvalidCode == other.createAccountInvalidCode)) &&
        (createAccountResultOk == other.createAccountResultOk);
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountResult(name: $name, createAccountNotFoundTotpKeyId: $createAccountNotFoundTotpKeyId, createAccountDuplicateCode: $createAccountDuplicateCode, createAccountInvalidCode: $createAccountInvalidCode, createAccountResultOk: $createAccountResultOk, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      const query_string.QueryFieldField(
        '__typename',
        description: '',
        return_: query_string.GraphQLOutputTypeConsiderListNull(
          query_string.GraphQLOutputTypeString(),
          graphql_type.ListType.notList,
          false,
        ),
      ),
      query_string.QueryFieldOn(
        typeName: 'CreateAccountNotFoundTotpKeyId',
        return_: createAccountNotFoundTotpKeyId,
      ),
      query_string.QueryFieldOn(
        typeName: 'CreateAccountDuplicateCode',
        return_: createAccountDuplicateCode,
      ),
      query_string.QueryFieldOn(
        typeName: 'CreateAccountInvalidCode',
        return_: createAccountInvalidCode,
      ),
      query_string.QueryFieldOn(
        typeName: 'CreateAccountResultOk',
        return_: createAccountResultOk,
      ),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return name;
  }

  @override
  @useResult
  String getDescription() {
    return '';
  }
}

@immutable
final class CreateAccountNotFoundTotpKeyId
    implements query_string.GraphQLObjectType {
  const CreateAccountNotFoundTotpKeyId(
    this.typeName__,
    this.extra__, {
    this.keyId,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final CreateAccountNotFoundTotpKeyId_keyId? keyId;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, CreateAccountNotFoundTotpKeyId_Field> extra__;

  /// `CreateAccountNotFoundTotpKeyId` を複製する
  @useResult
  CreateAccountNotFoundTotpKeyId copyWith({
    String? typeName__,
    (CreateAccountNotFoundTotpKeyId_keyId?,)? keyId,
    IMap<String, CreateAccountNotFoundTotpKeyId_Field>? extra__,
  }) {
    return CreateAccountNotFoundTotpKeyId(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      keyId: ((keyId == null) ? this.keyId : keyId.$1),
    );
  }

  /// `CreateAccountNotFoundTotpKeyId` のフィールドを変更したものを新しく返す
  @useResult
  CreateAccountNotFoundTotpKeyId updateFields({
    String Function(String prevTypeName__)? typeName__,
    CreateAccountNotFoundTotpKeyId_keyId? Function(
            CreateAccountNotFoundTotpKeyId_keyId? prevKeyId)?
        keyId,
    IMap<String, CreateAccountNotFoundTotpKeyId_Field> Function(
            IMap<String, CreateAccountNotFoundTotpKeyId_Field> prevExtra__)?
        extra__,
  }) {
    return CreateAccountNotFoundTotpKeyId(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      keyId: ((keyId == null) ? this.keyId : keyId(this.keyId)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      keyId,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (((other is CreateAccountNotFoundTotpKeyId) &&
                (typeName__ == other.typeName__)) &&
            (keyId == other.keyId)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountNotFoundTotpKeyId($typeName__, $extra__, keyId: $keyId, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (keyId) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return '';
  }
}

@immutable
sealed class CreateAccountNotFoundTotpKeyId_Field
    implements query_string.IntoGraphQLField {
  const CreateAccountNotFoundTotpKeyId_Field();
}

///
///
/// type: `type.TotpKeyId`
@immutable
final class CreateAccountNotFoundTotpKeyId_keyId
    implements CreateAccountNotFoundTotpKeyId_Field {
  ///
  ///
  /// type: `type.TotpKeyId`
  const CreateAccountNotFoundTotpKeyId_keyId();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is CreateAccountNotFoundTotpKeyId_keyId;
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountNotFoundTotpKeyId_keyId()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'keyId',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('TotpKeyId'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

@immutable
final class CreateAccountDuplicateCode
    implements query_string.GraphQLObjectType {
  const CreateAccountDuplicateCode(
    this.typeName__,
    this.extra__, {
    this.accountCode,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final CreateAccountDuplicateCode_accountCode? accountCode;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, CreateAccountDuplicateCode_Field> extra__;

  /// `CreateAccountDuplicateCode` を複製する
  @useResult
  CreateAccountDuplicateCode copyWith({
    String? typeName__,
    (CreateAccountDuplicateCode_accountCode?,)? accountCode,
    IMap<String, CreateAccountDuplicateCode_Field>? extra__,
  }) {
    return CreateAccountDuplicateCode(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      accountCode: ((accountCode == null) ? this.accountCode : accountCode.$1),
    );
  }

  /// `CreateAccountDuplicateCode` のフィールドを変更したものを新しく返す
  @useResult
  CreateAccountDuplicateCode updateFields({
    String Function(String prevTypeName__)? typeName__,
    CreateAccountDuplicateCode_accountCode? Function(
            CreateAccountDuplicateCode_accountCode? prevAccountCode)?
        accountCode,
    IMap<String, CreateAccountDuplicateCode_Field> Function(
            IMap<String, CreateAccountDuplicateCode_Field> prevExtra__)?
        extra__,
  }) {
    return CreateAccountDuplicateCode(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      accountCode: ((accountCode == null)
          ? this.accountCode
          : accountCode(this.accountCode)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      accountCode,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (((other is CreateAccountDuplicateCode) &&
                (typeName__ == other.typeName__)) &&
            (accountCode == other.accountCode)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountDuplicateCode($typeName__, $extra__, accountCode: $accountCode, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (accountCode) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return '';
  }
}

@immutable
sealed class CreateAccountDuplicateCode_Field
    implements query_string.IntoGraphQLField {
  const CreateAccountDuplicateCode_Field();
}

///
///
/// type: `type.AccountCode`
@immutable
final class CreateAccountDuplicateCode_accountCode
    implements CreateAccountDuplicateCode_Field {
  ///
  ///
  /// type: `type.AccountCode`
  const CreateAccountDuplicateCode_accountCode();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is CreateAccountDuplicateCode_accountCode;
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountDuplicateCode_accountCode()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'accountCode',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('AccountCode'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

@immutable
final class CreateAccountInvalidCode implements query_string.GraphQLObjectType {
  const CreateAccountInvalidCode(
    this.typeName__,
    this.extra__, {
    this.accountCode,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final CreateAccountInvalidCode_accountCode? accountCode;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, CreateAccountInvalidCode_Field> extra__;

  /// `CreateAccountInvalidCode` を複製する
  @useResult
  CreateAccountInvalidCode copyWith({
    String? typeName__,
    (CreateAccountInvalidCode_accountCode?,)? accountCode,
    IMap<String, CreateAccountInvalidCode_Field>? extra__,
  }) {
    return CreateAccountInvalidCode(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      accountCode: ((accountCode == null) ? this.accountCode : accountCode.$1),
    );
  }

  /// `CreateAccountInvalidCode` のフィールドを変更したものを新しく返す
  @useResult
  CreateAccountInvalidCode updateFields({
    String Function(String prevTypeName__)? typeName__,
    CreateAccountInvalidCode_accountCode? Function(
            CreateAccountInvalidCode_accountCode? prevAccountCode)?
        accountCode,
    IMap<String, CreateAccountInvalidCode_Field> Function(
            IMap<String, CreateAccountInvalidCode_Field> prevExtra__)?
        extra__,
  }) {
    return CreateAccountInvalidCode(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      accountCode: ((accountCode == null)
          ? this.accountCode
          : accountCode(this.accountCode)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      accountCode,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (((other is CreateAccountInvalidCode) &&
                (typeName__ == other.typeName__)) &&
            (accountCode == other.accountCode)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountInvalidCode($typeName__, $extra__, accountCode: $accountCode, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (accountCode) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return '';
  }
}

@immutable
sealed class CreateAccountInvalidCode_Field
    implements query_string.IntoGraphQLField {
  const CreateAccountInvalidCode_Field();
}

///
///
/// type: `type.AccountCode`
@immutable
final class CreateAccountInvalidCode_accountCode
    implements CreateAccountInvalidCode_Field {
  ///
  ///
  /// type: `type.AccountCode`
  const CreateAccountInvalidCode_accountCode();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is CreateAccountInvalidCode_accountCode;
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountInvalidCode_accountCode()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'accountCode',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('AccountCode'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

@immutable
final class CreateAccountResultOk implements query_string.GraphQLObjectType {
  const CreateAccountResultOk(
    this.typeName__,
    this.extra__, {
    this.account,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final CreateAccountResultOk_account? account;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, CreateAccountResultOk_Field> extra__;

  /// `CreateAccountResultOk` を複製する
  @useResult
  CreateAccountResultOk copyWith({
    String? typeName__,
    (CreateAccountResultOk_account?,)? account,
    IMap<String, CreateAccountResultOk_Field>? extra__,
  }) {
    return CreateAccountResultOk(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      account: ((account == null) ? this.account : account.$1),
    );
  }

  /// `CreateAccountResultOk` のフィールドを変更したものを新しく返す
  @useResult
  CreateAccountResultOk updateFields({
    String Function(String prevTypeName__)? typeName__,
    CreateAccountResultOk_account? Function(
            CreateAccountResultOk_account? prevAccount)?
        account,
    IMap<String, CreateAccountResultOk_Field> Function(
            IMap<String, CreateAccountResultOk_Field> prevExtra__)?
        extra__,
  }) {
    return CreateAccountResultOk(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      account: ((account == null) ? this.account : account(this.account)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      account,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (((other is CreateAccountResultOk) &&
                (typeName__ == other.typeName__)) &&
            (account == other.account)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountResultOk($typeName__, $extra__, account: $account, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (account) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return '';
  }
}

@immutable
sealed class CreateAccountResultOk_Field
    implements query_string.IntoGraphQLField {
  const CreateAccountResultOk_Field();
}

///
///
/// type: `type.Account`
@immutable
final class CreateAccountResultOk_account
    implements CreateAccountResultOk_Field {
  ///
  ///
  /// type: `type.Account`
  const CreateAccountResultOk_account(
    this.return_,
  );
  final Account return_;

  /// `CreateAccountResultOk_account` を複製する
  @useResult
  CreateAccountResultOk_account copyWith({
    Account? return_,
  }) {
    return CreateAccountResultOk_account(return_ ?? this.return_);
  }

  /// `CreateAccountResultOk_account` のフィールドを変更したものを新しく返す
  @useResult
  CreateAccountResultOk_account updateFields({
    Account Function(Account prevReturn_)? return_,
  }) {
    return CreateAccountResultOk_account(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is CreateAccountResultOk_account) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'CreateAccountResultOk_account($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'account',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// 鍵
@immutable
final class TotpKey implements query_string.GraphQLObjectType {
  /// 鍵
  const TotpKey(
    this.typeName__,
    this.extra__, {
    this.id,
    this.secret,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final TotpKey_id? id;

  /// 生成した鍵. TOTPの生成に使う
  final TotpKey_secret? secret;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, TotpKey_Field> extra__;

  /// `TotpKey` を複製する
  @useResult
  TotpKey copyWith({
    String? typeName__,
    (TotpKey_id?,)? id,
    (TotpKey_secret?,)? secret,
    IMap<String, TotpKey_Field>? extra__,
  }) {
    return TotpKey(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      id: ((id == null) ? this.id : id.$1),
      secret: ((secret == null) ? this.secret : secret.$1),
    );
  }

  /// `TotpKey` のフィールドを変更したものを新しく返す
  @useResult
  TotpKey updateFields({
    String Function(String prevTypeName__)? typeName__,
    TotpKey_id? Function(TotpKey_id? prevId)? id,
    TotpKey_secret? Function(TotpKey_secret? prevSecret)? secret,
    IMap<String, TotpKey_Field> Function(
            IMap<String, TotpKey_Field> prevExtra__)?
        extra__,
  }) {
    return TotpKey(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      id: ((id == null) ? this.id : id(this.id)),
      secret: ((secret == null) ? this.secret : secret(this.secret)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      id,
      secret,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((other is TotpKey) && (typeName__ == other.typeName__)) &&
                (id == other.id)) &&
            (secret == other.secret)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'TotpKey($typeName__, $extra__, id: $id, secret: $secret, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (id) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (secret) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return '鍵';
  }
}

/// 鍵
@immutable
sealed class TotpKey_Field implements query_string.IntoGraphQLField {
  /// 鍵
  const TotpKey_Field();
}

///
///
/// type: `type.AccountId`
@immutable
final class TotpKey_id implements TotpKey_Field {
  ///
  ///
  /// type: `type.AccountId`
  const TotpKey_id();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is TotpKey_id;
  }

  @override
  @useResult
  String toString() {
    return 'TotpKey_id()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'id',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('AccountId'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// 生成した鍵. TOTPの生成に使う
///
/// type: `type.AccountCode`
@immutable
final class TotpKey_secret implements TotpKey_Field {
  /// 生成した鍵. TOTPの生成に使う
  ///
  /// type: `type.AccountCode`
  const TotpKey_secret();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is TotpKey_secret;
  }

  @override
  @useResult
  String toString() {
    return 'TotpKey_secret()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'secret',
      description: '生成した鍵. TOTPの生成に使う',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('AccountCode'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
@immutable
final class GraphQL__Schema implements query_string.GraphQLObjectType {
  /// A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
  const GraphQL__Schema(
    this.typeName__,
    this.extra__, {
    this.description,
    this.types,
    this.queryType,
    this.mutationType,
    this.subscriptionType,
    this.directives,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final GraphQL__Schema_description? description;

  /// A list of all types supported by this server.
  final GraphQL__Schema_types? types;

  /// The type that query operations will be rooted at.
  final GraphQL__Schema_queryType? queryType;

  /// If this server supports mutation, the type that mutation operations will be rooted at.
  final GraphQL__Schema_mutationType? mutationType;

  /// If this server support subscription, the type that subscription operations will be rooted at.
  final GraphQL__Schema_subscriptionType? subscriptionType;

  /// A list of all directives supported by this server.
  final GraphQL__Schema_directives? directives;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, GraphQL__Schema_Field> extra__;

  /// `GraphQL__Schema` を複製する
  @useResult
  GraphQL__Schema copyWith({
    String? typeName__,
    (GraphQL__Schema_description?,)? description,
    (GraphQL__Schema_types?,)? types,
    (GraphQL__Schema_queryType?,)? queryType,
    (GraphQL__Schema_mutationType?,)? mutationType,
    (GraphQL__Schema_subscriptionType?,)? subscriptionType,
    (GraphQL__Schema_directives?,)? directives,
    IMap<String, GraphQL__Schema_Field>? extra__,
  }) {
    return GraphQL__Schema(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      description: ((description == null) ? this.description : description.$1),
      types: ((types == null) ? this.types : types.$1),
      queryType: ((queryType == null) ? this.queryType : queryType.$1),
      mutationType:
          ((mutationType == null) ? this.mutationType : mutationType.$1),
      subscriptionType: ((subscriptionType == null)
          ? this.subscriptionType
          : subscriptionType.$1),
      directives: ((directives == null) ? this.directives : directives.$1),
    );
  }

  /// `GraphQL__Schema` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Schema updateFields({
    String Function(String prevTypeName__)? typeName__,
    GraphQL__Schema_description? Function(
            GraphQL__Schema_description? prevDescription)?
        description,
    GraphQL__Schema_types? Function(GraphQL__Schema_types? prevTypes)? types,
    GraphQL__Schema_queryType? Function(
            GraphQL__Schema_queryType? prevQueryType)?
        queryType,
    GraphQL__Schema_mutationType? Function(
            GraphQL__Schema_mutationType? prevMutationType)?
        mutationType,
    GraphQL__Schema_subscriptionType? Function(
            GraphQL__Schema_subscriptionType? prevSubscriptionType)?
        subscriptionType,
    GraphQL__Schema_directives? Function(
            GraphQL__Schema_directives? prevDirectives)?
        directives,
    IMap<String, GraphQL__Schema_Field> Function(
            IMap<String, GraphQL__Schema_Field> prevExtra__)?
        extra__,
  }) {
    return GraphQL__Schema(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      description: ((description == null)
          ? this.description
          : description(this.description)),
      types: ((types == null) ? this.types : types(this.types)),
      queryType:
          ((queryType == null) ? this.queryType : queryType(this.queryType)),
      mutationType: ((mutationType == null)
          ? this.mutationType
          : mutationType(this.mutationType)),
      subscriptionType: ((subscriptionType == null)
          ? this.subscriptionType
          : subscriptionType(this.subscriptionType)),
      directives: ((directives == null)
          ? this.directives
          : directives(this.directives)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      description,
      types,
      queryType,
      mutationType,
      subscriptionType,
      directives,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((((((other is GraphQL__Schema) &&
                                    (typeName__ == other.typeName__)) &&
                                (description == other.description)) &&
                            (types == other.types)) &&
                        (queryType == other.queryType)) &&
                    (mutationType == other.mutationType)) &&
                (subscriptionType == other.subscriptionType)) &&
            (directives == other.directives)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Schema($typeName__, $extra__, description: $description, types: $types, queryType: $queryType, mutationType: $mutationType, subscriptionType: $subscriptionType, directives: $directives, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (description) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (types) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (queryType) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (mutationType) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (subscriptionType) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (directives) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.';
  }
}

/// A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
@immutable
sealed class GraphQL__Schema_Field implements query_string.IntoGraphQLField {
  /// A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
  const GraphQL__Schema_Field();
}

///
///
/// type: `String?`
@immutable
final class GraphQL__Schema_description implements GraphQL__Schema_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__Schema_description();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Schema_description;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Schema_description()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'description',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

/// A list of all types supported by this server.
///
/// type: `IList<type.GraphQL__Type>`
@immutable
final class GraphQL__Schema_types implements GraphQL__Schema_Field {
  /// A list of all types supported by this server.
  ///
  /// type: `IList<type.GraphQL__Type>`
  const GraphQL__Schema_types(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__Schema_types` を複製する
  @useResult
  GraphQL__Schema_types copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__Schema_types(return_ ?? this.return_);
  }

  /// `GraphQL__Schema_types` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Schema_types updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__Schema_types(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Schema_types) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Schema_types($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'types',
      description: 'A list of all types supported by this server.',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        false,
      ),
    );
  }
}

/// The type that query operations will be rooted at.
///
/// type: `type.GraphQL__Type`
@immutable
final class GraphQL__Schema_queryType implements GraphQL__Schema_Field {
  /// The type that query operations will be rooted at.
  ///
  /// type: `type.GraphQL__Type`
  const GraphQL__Schema_queryType(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__Schema_queryType` を複製する
  @useResult
  GraphQL__Schema_queryType copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__Schema_queryType(return_ ?? this.return_);
  }

  /// `GraphQL__Schema_queryType` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Schema_queryType updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__Schema_queryType(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Schema_queryType) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Schema_queryType($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'queryType',
      description: 'The type that query operations will be rooted at.',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// If this server supports mutation, the type that mutation operations will be rooted at.
///
/// type: `type.GraphQL__Type?`
@immutable
final class GraphQL__Schema_mutationType implements GraphQL__Schema_Field {
  /// If this server supports mutation, the type that mutation operations will be rooted at.
  ///
  /// type: `type.GraphQL__Type?`
  const GraphQL__Schema_mutationType(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__Schema_mutationType` を複製する
  @useResult
  GraphQL__Schema_mutationType copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__Schema_mutationType(return_ ?? this.return_);
  }

  /// `GraphQL__Schema_mutationType` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Schema_mutationType updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__Schema_mutationType(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Schema_mutationType) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Schema_mutationType($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'mutationType',
      description:
          'If this server supports mutation, the type that mutation operations will be rooted at.',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

/// If this server support subscription, the type that subscription operations will be rooted at.
///
/// type: `type.GraphQL__Type?`
@immutable
final class GraphQL__Schema_subscriptionType implements GraphQL__Schema_Field {
  /// If this server support subscription, the type that subscription operations will be rooted at.
  ///
  /// type: `type.GraphQL__Type?`
  const GraphQL__Schema_subscriptionType(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__Schema_subscriptionType` を複製する
  @useResult
  GraphQL__Schema_subscriptionType copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__Schema_subscriptionType(return_ ?? this.return_);
  }

  /// `GraphQL__Schema_subscriptionType` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Schema_subscriptionType updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__Schema_subscriptionType(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Schema_subscriptionType) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Schema_subscriptionType($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'subscriptionType',
      description:
          'If this server support subscription, the type that subscription operations will be rooted at.',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

/// A list of all directives supported by this server.
///
/// type: `IList<type.GraphQL__Directive>`
@immutable
final class GraphQL__Schema_directives implements GraphQL__Schema_Field {
  /// A list of all directives supported by this server.
  ///
  /// type: `IList<type.GraphQL__Directive>`
  const GraphQL__Schema_directives(
    this.return_,
  );
  final GraphQL__Directive return_;

  /// `GraphQL__Schema_directives` を複製する
  @useResult
  GraphQL__Schema_directives copyWith({
    GraphQL__Directive? return_,
  }) {
    return GraphQL__Schema_directives(return_ ?? this.return_);
  }

  /// `GraphQL__Schema_directives` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Schema_directives updateFields({
    GraphQL__Directive Function(GraphQL__Directive prevReturn_)? return_,
  }) {
    return GraphQL__Schema_directives(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Schema_directives) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Schema_directives($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'directives',
      description: 'A list of all directives supported by this server.',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        false,
      ),
    );
  }
}

/// The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
///
/// Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
@immutable
final class GraphQL__Type implements query_string.GraphQLObjectType {
  /// The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
  ///
  /// Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
  const GraphQL__Type(
    this.typeName__,
    this.extra__, {
    this.kind,
    this.name,
    this.description,
    this.specifiedByURL,
    this.fields,
    this.interfaces,
    this.possibleTypes,
    this.enumValues,
    this.inputFields,
    this.ofType,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final GraphQL__Type_kind? kind;

  final GraphQL__Type_name? name;

  final GraphQL__Type_description? description;

  final GraphQL__Type_specifiedByURL? specifiedByURL;

  final GraphQL__Type_fields? fields;

  final GraphQL__Type_interfaces? interfaces;

  final GraphQL__Type_possibleTypes? possibleTypes;

  final GraphQL__Type_enumValues? enumValues;

  final GraphQL__Type_inputFields? inputFields;

  final GraphQL__Type_ofType? ofType;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, GraphQL__Type_Field> extra__;

  /// `GraphQL__Type` を複製する
  @useResult
  GraphQL__Type copyWith({
    String? typeName__,
    (GraphQL__Type_kind?,)? kind,
    (GraphQL__Type_name?,)? name,
    (GraphQL__Type_description?,)? description,
    (GraphQL__Type_specifiedByURL?,)? specifiedByURL,
    (GraphQL__Type_fields?,)? fields,
    (GraphQL__Type_interfaces?,)? interfaces,
    (GraphQL__Type_possibleTypes?,)? possibleTypes,
    (GraphQL__Type_enumValues?,)? enumValues,
    (GraphQL__Type_inputFields?,)? inputFields,
    (GraphQL__Type_ofType?,)? ofType,
    IMap<String, GraphQL__Type_Field>? extra__,
  }) {
    return GraphQL__Type(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      kind: ((kind == null) ? this.kind : kind.$1),
      name: ((name == null) ? this.name : name.$1),
      description: ((description == null) ? this.description : description.$1),
      specifiedByURL:
          ((specifiedByURL == null) ? this.specifiedByURL : specifiedByURL.$1),
      fields: ((fields == null) ? this.fields : fields.$1),
      interfaces: ((interfaces == null) ? this.interfaces : interfaces.$1),
      possibleTypes:
          ((possibleTypes == null) ? this.possibleTypes : possibleTypes.$1),
      enumValues: ((enumValues == null) ? this.enumValues : enumValues.$1),
      inputFields: ((inputFields == null) ? this.inputFields : inputFields.$1),
      ofType: ((ofType == null) ? this.ofType : ofType.$1),
    );
  }

  /// `GraphQL__Type` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Type updateFields({
    String Function(String prevTypeName__)? typeName__,
    GraphQL__Type_kind? Function(GraphQL__Type_kind? prevKind)? kind,
    GraphQL__Type_name? Function(GraphQL__Type_name? prevName)? name,
    GraphQL__Type_description? Function(
            GraphQL__Type_description? prevDescription)?
        description,
    GraphQL__Type_specifiedByURL? Function(
            GraphQL__Type_specifiedByURL? prevSpecifiedByURL)?
        specifiedByURL,
    GraphQL__Type_fields? Function(GraphQL__Type_fields? prevFields)? fields,
    GraphQL__Type_interfaces? Function(
            GraphQL__Type_interfaces? prevInterfaces)?
        interfaces,
    GraphQL__Type_possibleTypes? Function(
            GraphQL__Type_possibleTypes? prevPossibleTypes)?
        possibleTypes,
    GraphQL__Type_enumValues? Function(
            GraphQL__Type_enumValues? prevEnumValues)?
        enumValues,
    GraphQL__Type_inputFields? Function(
            GraphQL__Type_inputFields? prevInputFields)?
        inputFields,
    GraphQL__Type_ofType? Function(GraphQL__Type_ofType? prevOfType)? ofType,
    IMap<String, GraphQL__Type_Field> Function(
            IMap<String, GraphQL__Type_Field> prevExtra__)?
        extra__,
  }) {
    return GraphQL__Type(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      kind: ((kind == null) ? this.kind : kind(this.kind)),
      name: ((name == null) ? this.name : name(this.name)),
      description: ((description == null)
          ? this.description
          : description(this.description)),
      specifiedByURL: ((specifiedByURL == null)
          ? this.specifiedByURL
          : specifiedByURL(this.specifiedByURL)),
      fields: ((fields == null) ? this.fields : fields(this.fields)),
      interfaces: ((interfaces == null)
          ? this.interfaces
          : interfaces(this.interfaces)),
      possibleTypes: ((possibleTypes == null)
          ? this.possibleTypes
          : possibleTypes(this.possibleTypes)),
      enumValues: ((enumValues == null)
          ? this.enumValues
          : enumValues(this.enumValues)),
      inputFields: ((inputFields == null)
          ? this.inputFields
          : inputFields(this.inputFields)),
      ofType: ((ofType == null) ? this.ofType : ofType(this.ofType)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      kind,
      name,
      description,
      specifiedByURL,
      fields,
      interfaces,
      possibleTypes,
      enumValues,
      inputFields,
      ofType,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((((((((((other is GraphQL__Type) &&
                                                    (typeName__ ==
                                                        other.typeName__)) &&
                                                (kind == other.kind)) &&
                                            (name == other.name)) &&
                                        (description == other.description)) &&
                                    (specifiedByURL == other.specifiedByURL)) &&
                                (fields == other.fields)) &&
                            (interfaces == other.interfaces)) &&
                        (possibleTypes == other.possibleTypes)) &&
                    (enumValues == other.enumValues)) &&
                (inputFields == other.inputFields)) &&
            (ofType == other.ofType)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type($typeName__, $extra__, kind: $kind, name: $name, description: $description, specifiedByURL: $specifiedByURL, fields: $fields, interfaces: $interfaces, possibleTypes: $possibleTypes, enumValues: $enumValues, inputFields: $inputFields, ofType: $ofType, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (kind) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (name) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (description) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (specifiedByURL) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (fields) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (interfaces) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (possibleTypes) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (enumValues) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (inputFields) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (ofType) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.';
  }
}

/// The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
///
/// Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
@immutable
sealed class GraphQL__Type_Field implements query_string.IntoGraphQLField {
  /// The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
  ///
  /// Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
  const GraphQL__Type_Field();
}

///
///
/// type: `type.GraphQL__TypeKind`
@immutable
final class GraphQL__Type_kind implements GraphQL__Type_Field {
  ///
  ///
  /// type: `type.GraphQL__TypeKind`
  const GraphQL__Type_kind();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Type_kind;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_kind()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'kind',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('__TypeKind'),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__Type_name implements GraphQL__Type_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__Type_name();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Type_name;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_name()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'name',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__Type_description implements GraphQL__Type_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__Type_description();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Type_description;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_description()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'description',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__Type_specifiedByURL implements GraphQL__Type_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__Type_specifiedByURL();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Type_specifiedByURL;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_specifiedByURL()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'specifiedByURL',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

///
///
/// type: `IList<type.GraphQL__Field>?`
@immutable
final class GraphQL__Type_fields implements GraphQL__Type_Field {
  ///
  ///
  /// type: `IList<type.GraphQL__Field>?`
  const GraphQL__Type_fields(
    this.return_, {
    this.includeDeprecated = const query_string.StaticValue(null),
  });
  final query_string.VariableOrStaticValue<bool?> includeDeprecated;

  final GraphQL__Field return_;

  /// `GraphQL__Type_fields` を複製する
  @useResult
  GraphQL__Type_fields copyWith({
    query_string.VariableOrStaticValue<bool?>? includeDeprecated,
    GraphQL__Field? return_,
  }) {
    return GraphQL__Type_fields(
      return_ ?? this.return_,
      includeDeprecated: includeDeprecated ?? this.includeDeprecated,
    );
  }

  /// `GraphQL__Type_fields` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Type_fields updateFields({
    query_string.VariableOrStaticValue<bool?> Function(
            query_string.VariableOrStaticValue<bool?> prevIncludeDeprecated)?
        includeDeprecated,
    GraphQL__Field Function(GraphQL__Field prevReturn_)? return_,
  }) {
    return GraphQL__Type_fields(
      ((return_ == null) ? this.return_ : return_(this.return_)),
      includeDeprecated: ((includeDeprecated == null)
          ? this.includeDeprecated
          : includeDeprecated(this.includeDeprecated)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      includeDeprecated,
      return_,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((other is GraphQL__Type_fields) &&
            (includeDeprecated == other.includeDeprecated)) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_fields($return_, includeDeprecated: $includeDeprecated, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'fields',
      args: IList([
        query_string.QueryFieldArg(
          name: 'includeDeprecated',
          input: includeDeprecatedToQueryInput(),
        )
      ]),
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        true,
      ),
    );
  }

  @useResult
  query_string.QueryInput includeDeprecatedToQueryInput() {
    return includeDeprecated.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'Boolean',
        isNullable: true,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return switch (staticValue) {
          null => const query_string.QueryInputNull(),
          final nonNull => query_string.QueryInputBoolean(nonNull),
        };
      },
    );
  }
}

///
///
/// type: `IList<type.GraphQL__Type>?`
@immutable
final class GraphQL__Type_interfaces implements GraphQL__Type_Field {
  ///
  ///
  /// type: `IList<type.GraphQL__Type>?`
  const GraphQL__Type_interfaces(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__Type_interfaces` を複製する
  @useResult
  GraphQL__Type_interfaces copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__Type_interfaces(return_ ?? this.return_);
  }

  /// `GraphQL__Type_interfaces` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Type_interfaces updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__Type_interfaces(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Type_interfaces) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_interfaces($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'interfaces',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        true,
      ),
    );
  }
}

///
///
/// type: `IList<type.GraphQL__Type>?`
@immutable
final class GraphQL__Type_possibleTypes implements GraphQL__Type_Field {
  ///
  ///
  /// type: `IList<type.GraphQL__Type>?`
  const GraphQL__Type_possibleTypes(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__Type_possibleTypes` を複製する
  @useResult
  GraphQL__Type_possibleTypes copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__Type_possibleTypes(return_ ?? this.return_);
  }

  /// `GraphQL__Type_possibleTypes` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Type_possibleTypes updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__Type_possibleTypes(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Type_possibleTypes) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_possibleTypes($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'possibleTypes',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        true,
      ),
    );
  }
}

///
///
/// type: `IList<type.GraphQL__EnumValue>?`
@immutable
final class GraphQL__Type_enumValues implements GraphQL__Type_Field {
  ///
  ///
  /// type: `IList<type.GraphQL__EnumValue>?`
  const GraphQL__Type_enumValues(
    this.return_, {
    this.includeDeprecated = const query_string.StaticValue(null),
  });
  final query_string.VariableOrStaticValue<bool?> includeDeprecated;

  final GraphQL__EnumValue return_;

  /// `GraphQL__Type_enumValues` を複製する
  @useResult
  GraphQL__Type_enumValues copyWith({
    query_string.VariableOrStaticValue<bool?>? includeDeprecated,
    GraphQL__EnumValue? return_,
  }) {
    return GraphQL__Type_enumValues(
      return_ ?? this.return_,
      includeDeprecated: includeDeprecated ?? this.includeDeprecated,
    );
  }

  /// `GraphQL__Type_enumValues` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Type_enumValues updateFields({
    query_string.VariableOrStaticValue<bool?> Function(
            query_string.VariableOrStaticValue<bool?> prevIncludeDeprecated)?
        includeDeprecated,
    GraphQL__EnumValue Function(GraphQL__EnumValue prevReturn_)? return_,
  }) {
    return GraphQL__Type_enumValues(
      ((return_ == null) ? this.return_ : return_(this.return_)),
      includeDeprecated: ((includeDeprecated == null)
          ? this.includeDeprecated
          : includeDeprecated(this.includeDeprecated)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      includeDeprecated,
      return_,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((other is GraphQL__Type_enumValues) &&
            (includeDeprecated == other.includeDeprecated)) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_enumValues($return_, includeDeprecated: $includeDeprecated, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'enumValues',
      args: IList([
        query_string.QueryFieldArg(
          name: 'includeDeprecated',
          input: includeDeprecatedToQueryInput(),
        )
      ]),
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        true,
      ),
    );
  }

  @useResult
  query_string.QueryInput includeDeprecatedToQueryInput() {
    return includeDeprecated.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'Boolean',
        isNullable: true,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return switch (staticValue) {
          null => const query_string.QueryInputNull(),
          final nonNull => query_string.QueryInputBoolean(nonNull),
        };
      },
    );
  }
}

///
///
/// type: `IList<type.GraphQL__InputValue>?`
@immutable
final class GraphQL__Type_inputFields implements GraphQL__Type_Field {
  ///
  ///
  /// type: `IList<type.GraphQL__InputValue>?`
  const GraphQL__Type_inputFields(
    this.return_, {
    this.includeDeprecated = const query_string.StaticValue(null),
  });
  final query_string.VariableOrStaticValue<bool?> includeDeprecated;

  final GraphQL__InputValue return_;

  /// `GraphQL__Type_inputFields` を複製する
  @useResult
  GraphQL__Type_inputFields copyWith({
    query_string.VariableOrStaticValue<bool?>? includeDeprecated,
    GraphQL__InputValue? return_,
  }) {
    return GraphQL__Type_inputFields(
      return_ ?? this.return_,
      includeDeprecated: includeDeprecated ?? this.includeDeprecated,
    );
  }

  /// `GraphQL__Type_inputFields` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Type_inputFields updateFields({
    query_string.VariableOrStaticValue<bool?> Function(
            query_string.VariableOrStaticValue<bool?> prevIncludeDeprecated)?
        includeDeprecated,
    GraphQL__InputValue Function(GraphQL__InputValue prevReturn_)? return_,
  }) {
    return GraphQL__Type_inputFields(
      ((return_ == null) ? this.return_ : return_(this.return_)),
      includeDeprecated: ((includeDeprecated == null)
          ? this.includeDeprecated
          : includeDeprecated(this.includeDeprecated)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      includeDeprecated,
      return_,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((other is GraphQL__Type_inputFields) &&
            (includeDeprecated == other.includeDeprecated)) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_inputFields($return_, includeDeprecated: $includeDeprecated, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'inputFields',
      args: IList([
        query_string.QueryFieldArg(
          name: 'includeDeprecated',
          input: includeDeprecatedToQueryInput(),
        )
      ]),
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        true,
      ),
    );
  }

  @useResult
  query_string.QueryInput includeDeprecatedToQueryInput() {
    return includeDeprecated.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'Boolean',
        isNullable: true,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return switch (staticValue) {
          null => const query_string.QueryInputNull(),
          final nonNull => query_string.QueryInputBoolean(nonNull),
        };
      },
    );
  }
}

///
///
/// type: `type.GraphQL__Type?`
@immutable
final class GraphQL__Type_ofType implements GraphQL__Type_Field {
  ///
  ///
  /// type: `type.GraphQL__Type?`
  const GraphQL__Type_ofType(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__Type_ofType` を複製する
  @useResult
  GraphQL__Type_ofType copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__Type_ofType(return_ ?? this.return_);
  }

  /// `GraphQL__Type_ofType` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Type_ofType updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__Type_ofType(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Type_ofType) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Type_ofType($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'ofType',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

/// Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
@immutable
final class GraphQL__Field implements query_string.GraphQLObjectType {
  /// Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
  const GraphQL__Field(
    this.typeName__,
    this.extra__, {
    this.name,
    this.description,
    this.args,
    this.type,
    this.isDeprecated,
    this.deprecationReason,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final GraphQL__Field_name? name;

  final GraphQL__Field_description? description;

  final GraphQL__Field_args? args;

  final GraphQL__Field_type? type;

  final GraphQL__Field_isDeprecated? isDeprecated;

  final GraphQL__Field_deprecationReason? deprecationReason;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, GraphQL__Field_Field> extra__;

  /// `GraphQL__Field` を複製する
  @useResult
  GraphQL__Field copyWith({
    String? typeName__,
    (GraphQL__Field_name?,)? name,
    (GraphQL__Field_description?,)? description,
    (GraphQL__Field_args?,)? args,
    (GraphQL__Field_type?,)? type,
    (GraphQL__Field_isDeprecated?,)? isDeprecated,
    (GraphQL__Field_deprecationReason?,)? deprecationReason,
    IMap<String, GraphQL__Field_Field>? extra__,
  }) {
    return GraphQL__Field(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      name: ((name == null) ? this.name : name.$1),
      description: ((description == null) ? this.description : description.$1),
      args: ((args == null) ? this.args : args.$1),
      type: ((type == null) ? this.type : type.$1),
      isDeprecated:
          ((isDeprecated == null) ? this.isDeprecated : isDeprecated.$1),
      deprecationReason: ((deprecationReason == null)
          ? this.deprecationReason
          : deprecationReason.$1),
    );
  }

  /// `GraphQL__Field` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Field updateFields({
    String Function(String prevTypeName__)? typeName__,
    GraphQL__Field_name? Function(GraphQL__Field_name? prevName)? name,
    GraphQL__Field_description? Function(
            GraphQL__Field_description? prevDescription)?
        description,
    GraphQL__Field_args? Function(GraphQL__Field_args? prevArgs)? args,
    GraphQL__Field_type? Function(GraphQL__Field_type? prevType)? type,
    GraphQL__Field_isDeprecated? Function(
            GraphQL__Field_isDeprecated? prevIsDeprecated)?
        isDeprecated,
    GraphQL__Field_deprecationReason? Function(
            GraphQL__Field_deprecationReason? prevDeprecationReason)?
        deprecationReason,
    IMap<String, GraphQL__Field_Field> Function(
            IMap<String, GraphQL__Field_Field> prevExtra__)?
        extra__,
  }) {
    return GraphQL__Field(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      name: ((name == null) ? this.name : name(this.name)),
      description: ((description == null)
          ? this.description
          : description(this.description)),
      args: ((args == null) ? this.args : args(this.args)),
      type: ((type == null) ? this.type : type(this.type)),
      isDeprecated: ((isDeprecated == null)
          ? this.isDeprecated
          : isDeprecated(this.isDeprecated)),
      deprecationReason: ((deprecationReason == null)
          ? this.deprecationReason
          : deprecationReason(this.deprecationReason)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      name,
      description,
      args,
      type,
      isDeprecated,
      deprecationReason,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((((((other is GraphQL__Field) &&
                                    (typeName__ == other.typeName__)) &&
                                (name == other.name)) &&
                            (description == other.description)) &&
                        (args == other.args)) &&
                    (type == other.type)) &&
                (isDeprecated == other.isDeprecated)) &&
            (deprecationReason == other.deprecationReason)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Field($typeName__, $extra__, name: $name, description: $description, args: $args, type: $type, isDeprecated: $isDeprecated, deprecationReason: $deprecationReason, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (name) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (description) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (args) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (type) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (isDeprecated) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (deprecationReason) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.';
  }
}

/// Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
@immutable
sealed class GraphQL__Field_Field implements query_string.IntoGraphQLField {
  /// Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
  const GraphQL__Field_Field();
}

///
///
/// type: `String`
@immutable
final class GraphQL__Field_name implements GraphQL__Field_Field {
  ///
  ///
  /// type: `String`
  const GraphQL__Field_name();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Field_name;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Field_name()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'name',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__Field_description implements GraphQL__Field_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__Field_description();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Field_description;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Field_description()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'description',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

///
///
/// type: `IList<type.GraphQL__InputValue>`
@immutable
final class GraphQL__Field_args implements GraphQL__Field_Field {
  ///
  ///
  /// type: `IList<type.GraphQL__InputValue>`
  const GraphQL__Field_args(
    this.return_, {
    this.includeDeprecated = const query_string.StaticValue(null),
  });
  final query_string.VariableOrStaticValue<bool?> includeDeprecated;

  final GraphQL__InputValue return_;

  /// `GraphQL__Field_args` を複製する
  @useResult
  GraphQL__Field_args copyWith({
    query_string.VariableOrStaticValue<bool?>? includeDeprecated,
    GraphQL__InputValue? return_,
  }) {
    return GraphQL__Field_args(
      return_ ?? this.return_,
      includeDeprecated: includeDeprecated ?? this.includeDeprecated,
    );
  }

  /// `GraphQL__Field_args` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Field_args updateFields({
    query_string.VariableOrStaticValue<bool?> Function(
            query_string.VariableOrStaticValue<bool?> prevIncludeDeprecated)?
        includeDeprecated,
    GraphQL__InputValue Function(GraphQL__InputValue prevReturn_)? return_,
  }) {
    return GraphQL__Field_args(
      ((return_ == null) ? this.return_ : return_(this.return_)),
      includeDeprecated: ((includeDeprecated == null)
          ? this.includeDeprecated
          : includeDeprecated(this.includeDeprecated)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      includeDeprecated,
      return_,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((other is GraphQL__Field_args) &&
            (includeDeprecated == other.includeDeprecated)) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Field_args($return_, includeDeprecated: $includeDeprecated, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'args',
      args: IList([
        query_string.QueryFieldArg(
          name: 'includeDeprecated',
          input: includeDeprecatedToQueryInput(),
        )
      ]),
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        false,
      ),
    );
  }

  @useResult
  query_string.QueryInput includeDeprecatedToQueryInput() {
    return includeDeprecated.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'Boolean',
        isNullable: true,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return switch (staticValue) {
          null => const query_string.QueryInputNull(),
          final nonNull => query_string.QueryInputBoolean(nonNull),
        };
      },
    );
  }
}

///
///
/// type: `type.GraphQL__Type`
@immutable
final class GraphQL__Field_type implements GraphQL__Field_Field {
  ///
  ///
  /// type: `type.GraphQL__Type`
  const GraphQL__Field_type(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__Field_type` を複製する
  @useResult
  GraphQL__Field_type copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__Field_type(return_ ?? this.return_);
  }

  /// `GraphQL__Field_type` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Field_type updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__Field_type(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__Field_type) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Field_type($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'type',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `bool`
@immutable
final class GraphQL__Field_isDeprecated implements GraphQL__Field_Field {
  ///
  ///
  /// type: `bool`
  const GraphQL__Field_isDeprecated();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Field_isDeprecated;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Field_isDeprecated()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'isDeprecated',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeBoolean(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__Field_deprecationReason implements GraphQL__Field_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__Field_deprecationReason();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Field_deprecationReason;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Field_deprecationReason()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'deprecationReason',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

/// Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
@immutable
final class GraphQL__InputValue implements query_string.GraphQLObjectType {
  /// Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
  const GraphQL__InputValue(
    this.typeName__,
    this.extra__, {
    this.name,
    this.description,
    this.type,
    this.defaultValue,
    this.isDeprecated,
    this.deprecationReason,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final GraphQL__InputValue_name? name;

  final GraphQL__InputValue_description? description;

  final GraphQL__InputValue_type? type;

  /// A GraphQL-formatted string representing the default value for this input value.
  final GraphQL__InputValue_defaultValue? defaultValue;

  final GraphQL__InputValue_isDeprecated? isDeprecated;

  final GraphQL__InputValue_deprecationReason? deprecationReason;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, GraphQL__InputValue_Field> extra__;

  /// `GraphQL__InputValue` を複製する
  @useResult
  GraphQL__InputValue copyWith({
    String? typeName__,
    (GraphQL__InputValue_name?,)? name,
    (GraphQL__InputValue_description?,)? description,
    (GraphQL__InputValue_type?,)? type,
    (GraphQL__InputValue_defaultValue?,)? defaultValue,
    (GraphQL__InputValue_isDeprecated?,)? isDeprecated,
    (GraphQL__InputValue_deprecationReason?,)? deprecationReason,
    IMap<String, GraphQL__InputValue_Field>? extra__,
  }) {
    return GraphQL__InputValue(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      name: ((name == null) ? this.name : name.$1),
      description: ((description == null) ? this.description : description.$1),
      type: ((type == null) ? this.type : type.$1),
      defaultValue:
          ((defaultValue == null) ? this.defaultValue : defaultValue.$1),
      isDeprecated:
          ((isDeprecated == null) ? this.isDeprecated : isDeprecated.$1),
      deprecationReason: ((deprecationReason == null)
          ? this.deprecationReason
          : deprecationReason.$1),
    );
  }

  /// `GraphQL__InputValue` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__InputValue updateFields({
    String Function(String prevTypeName__)? typeName__,
    GraphQL__InputValue_name? Function(GraphQL__InputValue_name? prevName)?
        name,
    GraphQL__InputValue_description? Function(
            GraphQL__InputValue_description? prevDescription)?
        description,
    GraphQL__InputValue_type? Function(GraphQL__InputValue_type? prevType)?
        type,
    GraphQL__InputValue_defaultValue? Function(
            GraphQL__InputValue_defaultValue? prevDefaultValue)?
        defaultValue,
    GraphQL__InputValue_isDeprecated? Function(
            GraphQL__InputValue_isDeprecated? prevIsDeprecated)?
        isDeprecated,
    GraphQL__InputValue_deprecationReason? Function(
            GraphQL__InputValue_deprecationReason? prevDeprecationReason)?
        deprecationReason,
    IMap<String, GraphQL__InputValue_Field> Function(
            IMap<String, GraphQL__InputValue_Field> prevExtra__)?
        extra__,
  }) {
    return GraphQL__InputValue(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      name: ((name == null) ? this.name : name(this.name)),
      description: ((description == null)
          ? this.description
          : description(this.description)),
      type: ((type == null) ? this.type : type(this.type)),
      defaultValue: ((defaultValue == null)
          ? this.defaultValue
          : defaultValue(this.defaultValue)),
      isDeprecated: ((isDeprecated == null)
          ? this.isDeprecated
          : isDeprecated(this.isDeprecated)),
      deprecationReason: ((deprecationReason == null)
          ? this.deprecationReason
          : deprecationReason(this.deprecationReason)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      name,
      description,
      type,
      defaultValue,
      isDeprecated,
      deprecationReason,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((((((other is GraphQL__InputValue) &&
                                    (typeName__ == other.typeName__)) &&
                                (name == other.name)) &&
                            (description == other.description)) &&
                        (type == other.type)) &&
                    (defaultValue == other.defaultValue)) &&
                (isDeprecated == other.isDeprecated)) &&
            (deprecationReason == other.deprecationReason)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__InputValue($typeName__, $extra__, name: $name, description: $description, type: $type, defaultValue: $defaultValue, isDeprecated: $isDeprecated, deprecationReason: $deprecationReason, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (name) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (description) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (type) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (defaultValue) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (isDeprecated) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (deprecationReason) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.';
  }
}

/// Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
@immutable
sealed class GraphQL__InputValue_Field
    implements query_string.IntoGraphQLField {
  /// Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
  const GraphQL__InputValue_Field();
}

///
///
/// type: `String`
@immutable
final class GraphQL__InputValue_name implements GraphQL__InputValue_Field {
  ///
  ///
  /// type: `String`
  const GraphQL__InputValue_name();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__InputValue_name;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__InputValue_name()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'name',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__InputValue_description
    implements GraphQL__InputValue_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__InputValue_description();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__InputValue_description;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__InputValue_description()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'description',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

///
///
/// type: `type.GraphQL__Type`
@immutable
final class GraphQL__InputValue_type implements GraphQL__InputValue_Field {
  ///
  ///
  /// type: `type.GraphQL__Type`
  const GraphQL__InputValue_type(
    this.return_,
  );
  final GraphQL__Type return_;

  /// `GraphQL__InputValue_type` を複製する
  @useResult
  GraphQL__InputValue_type copyWith({
    GraphQL__Type? return_,
  }) {
    return GraphQL__InputValue_type(return_ ?? this.return_);
  }

  /// `GraphQL__InputValue_type` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__InputValue_type updateFields({
    GraphQL__Type Function(GraphQL__Type prevReturn_)? return_,
  }) {
    return GraphQL__InputValue_type(
        (return_ == null) ? this.return_ : return_(this.return_));
  }

  @override
  @useResult
  int get hashCode {
    return return_.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is GraphQL__InputValue_type) && (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__InputValue_type($return_, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'type',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

/// A GraphQL-formatted string representing the default value for this input value.
///
/// type: `String?`
@immutable
final class GraphQL__InputValue_defaultValue
    implements GraphQL__InputValue_Field {
  /// A GraphQL-formatted string representing the default value for this input value.
  ///
  /// type: `String?`
  const GraphQL__InputValue_defaultValue();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__InputValue_defaultValue;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__InputValue_defaultValue()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'defaultValue',
      description:
          'A GraphQL-formatted string representing the default value for this input value.',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

///
///
/// type: `bool`
@immutable
final class GraphQL__InputValue_isDeprecated
    implements GraphQL__InputValue_Field {
  ///
  ///
  /// type: `bool`
  const GraphQL__InputValue_isDeprecated();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__InputValue_isDeprecated;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__InputValue_isDeprecated()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'isDeprecated',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeBoolean(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__InputValue_deprecationReason
    implements GraphQL__InputValue_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__InputValue_deprecationReason();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__InputValue_deprecationReason;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__InputValue_deprecationReason()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'deprecationReason',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

/// One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
@immutable
final class GraphQL__EnumValue implements query_string.GraphQLObjectType {
  /// One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
  const GraphQL__EnumValue(
    this.typeName__,
    this.extra__, {
    this.name,
    this.description,
    this.isDeprecated,
    this.deprecationReason,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final GraphQL__EnumValue_name? name;

  final GraphQL__EnumValue_description? description;

  final GraphQL__EnumValue_isDeprecated? isDeprecated;

  final GraphQL__EnumValue_deprecationReason? deprecationReason;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, GraphQL__EnumValue_Field> extra__;

  /// `GraphQL__EnumValue` を複製する
  @useResult
  GraphQL__EnumValue copyWith({
    String? typeName__,
    (GraphQL__EnumValue_name?,)? name,
    (GraphQL__EnumValue_description?,)? description,
    (GraphQL__EnumValue_isDeprecated?,)? isDeprecated,
    (GraphQL__EnumValue_deprecationReason?,)? deprecationReason,
    IMap<String, GraphQL__EnumValue_Field>? extra__,
  }) {
    return GraphQL__EnumValue(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      name: ((name == null) ? this.name : name.$1),
      description: ((description == null) ? this.description : description.$1),
      isDeprecated:
          ((isDeprecated == null) ? this.isDeprecated : isDeprecated.$1),
      deprecationReason: ((deprecationReason == null)
          ? this.deprecationReason
          : deprecationReason.$1),
    );
  }

  /// `GraphQL__EnumValue` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__EnumValue updateFields({
    String Function(String prevTypeName__)? typeName__,
    GraphQL__EnumValue_name? Function(GraphQL__EnumValue_name? prevName)? name,
    GraphQL__EnumValue_description? Function(
            GraphQL__EnumValue_description? prevDescription)?
        description,
    GraphQL__EnumValue_isDeprecated? Function(
            GraphQL__EnumValue_isDeprecated? prevIsDeprecated)?
        isDeprecated,
    GraphQL__EnumValue_deprecationReason? Function(
            GraphQL__EnumValue_deprecationReason? prevDeprecationReason)?
        deprecationReason,
    IMap<String, GraphQL__EnumValue_Field> Function(
            IMap<String, GraphQL__EnumValue_Field> prevExtra__)?
        extra__,
  }) {
    return GraphQL__EnumValue(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      name: ((name == null) ? this.name : name(this.name)),
      description: ((description == null)
          ? this.description
          : description(this.description)),
      isDeprecated: ((isDeprecated == null)
          ? this.isDeprecated
          : isDeprecated(this.isDeprecated)),
      deprecationReason: ((deprecationReason == null)
          ? this.deprecationReason
          : deprecationReason(this.deprecationReason)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      name,
      description,
      isDeprecated,
      deprecationReason,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((((((other is GraphQL__EnumValue) &&
                            (typeName__ == other.typeName__)) &&
                        (name == other.name)) &&
                    (description == other.description)) &&
                (isDeprecated == other.isDeprecated)) &&
            (deprecationReason == other.deprecationReason)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__EnumValue($typeName__, $extra__, name: $name, description: $description, isDeprecated: $isDeprecated, deprecationReason: $deprecationReason, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (name) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (description) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (isDeprecated) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (deprecationReason) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.';
  }
}

/// One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
@immutable
sealed class GraphQL__EnumValue_Field implements query_string.IntoGraphQLField {
  /// One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
  const GraphQL__EnumValue_Field();
}

///
///
/// type: `String`
@immutable
final class GraphQL__EnumValue_name implements GraphQL__EnumValue_Field {
  ///
  ///
  /// type: `String`
  const GraphQL__EnumValue_name();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__EnumValue_name;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__EnumValue_name()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'name',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__EnumValue_description implements GraphQL__EnumValue_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__EnumValue_description();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__EnumValue_description;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__EnumValue_description()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'description',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

///
///
/// type: `bool`
@immutable
final class GraphQL__EnumValue_isDeprecated
    implements GraphQL__EnumValue_Field {
  ///
  ///
  /// type: `bool`
  const GraphQL__EnumValue_isDeprecated();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__EnumValue_isDeprecated;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__EnumValue_isDeprecated()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'isDeprecated',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeBoolean(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__EnumValue_deprecationReason
    implements GraphQL__EnumValue_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__EnumValue_deprecationReason();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__EnumValue_deprecationReason;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__EnumValue_deprecationReason()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'deprecationReason',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

/// A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
///
/// In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
@immutable
final class GraphQL__Directive implements query_string.GraphQLObjectType {
  /// A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
  ///
  /// In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
  const GraphQL__Directive(
    this.typeName__,
    this.extra__, {
    this.name,
    this.description,
    this.isRepeatable,
    this.locations,
    this.args,
  });

  /// この構造の型につける型の名前. ※同じ名前で違う構造にするとエラーになるので注意!
  final String typeName__;

  final GraphQL__Directive_name? name;

  final GraphQL__Directive_description? description;

  final GraphQL__Directive_isRepeatable? isRepeatable;

  final GraphQL__Directive_locations? locations;

  final GraphQL__Directive_args? args;

  /// フィールド名を変更する場合などに使う 未実装 https://graphql.org/learn/queries/#aliases
  final IMap<String, GraphQL__Directive_Field> extra__;

  /// `GraphQL__Directive` を複製する
  @useResult
  GraphQL__Directive copyWith({
    String? typeName__,
    (GraphQL__Directive_name?,)? name,
    (GraphQL__Directive_description?,)? description,
    (GraphQL__Directive_isRepeatable?,)? isRepeatable,
    (GraphQL__Directive_locations?,)? locations,
    (GraphQL__Directive_args?,)? args,
    IMap<String, GraphQL__Directive_Field>? extra__,
  }) {
    return GraphQL__Directive(
      typeName__ ?? this.typeName__,
      extra__ ?? this.extra__,
      name: ((name == null) ? this.name : name.$1),
      description: ((description == null) ? this.description : description.$1),
      isRepeatable:
          ((isRepeatable == null) ? this.isRepeatable : isRepeatable.$1),
      locations: ((locations == null) ? this.locations : locations.$1),
      args: ((args == null) ? this.args : args.$1),
    );
  }

  /// `GraphQL__Directive` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Directive updateFields({
    String Function(String prevTypeName__)? typeName__,
    GraphQL__Directive_name? Function(GraphQL__Directive_name? prevName)? name,
    GraphQL__Directive_description? Function(
            GraphQL__Directive_description? prevDescription)?
        description,
    GraphQL__Directive_isRepeatable? Function(
            GraphQL__Directive_isRepeatable? prevIsRepeatable)?
        isRepeatable,
    GraphQL__Directive_locations? Function(
            GraphQL__Directive_locations? prevLocations)?
        locations,
    GraphQL__Directive_args? Function(GraphQL__Directive_args? prevArgs)? args,
    IMap<String, GraphQL__Directive_Field> Function(
            IMap<String, GraphQL__Directive_Field> prevExtra__)?
        extra__,
  }) {
    return GraphQL__Directive(
      ((typeName__ == null) ? this.typeName__ : typeName__(this.typeName__)),
      ((extra__ == null) ? this.extra__ : extra__(this.extra__)),
      name: ((name == null) ? this.name : name(this.name)),
      description: ((description == null)
          ? this.description
          : description(this.description)),
      isRepeatable: ((isRepeatable == null)
          ? this.isRepeatable
          : isRepeatable(this.isRepeatable)),
      locations:
          ((locations == null) ? this.locations : locations(this.locations)),
      args: ((args == null) ? this.args : args(this.args)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      typeName__,
      name,
      description,
      isRepeatable,
      locations,
      args,
      extra__,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (((((((other is GraphQL__Directive) &&
                                (typeName__ == other.typeName__)) &&
                            (name == other.name)) &&
                        (description == other.description)) &&
                    (isRepeatable == other.isRepeatable)) &&
                (locations == other.locations)) &&
            (args == other.args)) &&
        (extra__ == other.extra__);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Directive($typeName__, $extra__, name: $name, description: $description, isRepeatable: $isRepeatable, locations: $locations, args: $args, )';
  }

  @override
  @useResult
  IList<query_string.QueryField> toFieldList() {
    return IList([
      ...switch (name) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (description) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (isRepeatable) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (locations) {
        null => const [],
        final field => [field.toField()],
      },
      ...switch (args) {
        null => const [],
        final field => [field.toField()],
      },
      ...extra__.mapTo((aliasName, field) {
        return field.toField().setAliasName(aliasName);
      }),
    ]);
  }

  @override
  @useResult
  String getTypeName() {
    return typeName__;
  }

  @override
  @useResult
  String getDescription() {
    return "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.";
  }
}

/// A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
///
/// In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
@immutable
sealed class GraphQL__Directive_Field implements query_string.IntoGraphQLField {
  /// A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
  ///
  /// In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
  const GraphQL__Directive_Field();
}

///
///
/// type: `String`
@immutable
final class GraphQL__Directive_name implements GraphQL__Directive_Field {
  ///
  ///
  /// type: `String`
  const GraphQL__Directive_name();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Directive_name;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Directive_name()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'name',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `String?`
@immutable
final class GraphQL__Directive_description implements GraphQL__Directive_Field {
  ///
  ///
  /// type: `String?`
  const GraphQL__Directive_description();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Directive_description;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Directive_description()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'description',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeString(),
        graphql_type.ListType.notList,
        true,
      ),
    );
  }
}

///
///
/// type: `bool`
@immutable
final class GraphQL__Directive_isRepeatable
    implements GraphQL__Directive_Field {
  ///
  ///
  /// type: `bool`
  const GraphQL__Directive_isRepeatable();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Directive_isRepeatable;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Directive_isRepeatable()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'isRepeatable',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeBoolean(),
        graphql_type.ListType.notList,
        false,
      ),
    );
  }
}

///
///
/// type: `IList<type.GraphQL__DirectiveLocation>`
@immutable
final class GraphQL__Directive_locations implements GraphQL__Directive_Field {
  ///
  ///
  /// type: `IList<type.GraphQL__DirectiveLocation>`
  const GraphQL__Directive_locations();
  @override
  @useResult
  int get hashCode {
    return Object.hashAll([]);
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return other is GraphQL__Directive_locations;
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Directive_locations()';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return const query_string.QueryFieldField(
      'locations',
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeNotObject('__DirectiveLocation'),
        graphql_type.ListType.list,
        false,
      ),
    );
  }
}

///
///
/// type: `IList<type.GraphQL__InputValue>`
@immutable
final class GraphQL__Directive_args implements GraphQL__Directive_Field {
  ///
  ///
  /// type: `IList<type.GraphQL__InputValue>`
  const GraphQL__Directive_args(
    this.return_, {
    this.includeDeprecated = const query_string.StaticValue(null),
  });
  final query_string.VariableOrStaticValue<bool?> includeDeprecated;

  final GraphQL__InputValue return_;

  /// `GraphQL__Directive_args` を複製する
  @useResult
  GraphQL__Directive_args copyWith({
    query_string.VariableOrStaticValue<bool?>? includeDeprecated,
    GraphQL__InputValue? return_,
  }) {
    return GraphQL__Directive_args(
      return_ ?? this.return_,
      includeDeprecated: includeDeprecated ?? this.includeDeprecated,
    );
  }

  /// `GraphQL__Directive_args` のフィールドを変更したものを新しく返す
  @useResult
  GraphQL__Directive_args updateFields({
    query_string.VariableOrStaticValue<bool?> Function(
            query_string.VariableOrStaticValue<bool?> prevIncludeDeprecated)?
        includeDeprecated,
    GraphQL__InputValue Function(GraphQL__InputValue prevReturn_)? return_,
  }) {
    return GraphQL__Directive_args(
      ((return_ == null) ? this.return_ : return_(this.return_)),
      includeDeprecated: ((includeDeprecated == null)
          ? this.includeDeprecated
          : includeDeprecated(this.includeDeprecated)),
    );
  }

  @override
  @useResult
  int get hashCode {
    return Object.hash(
      includeDeprecated,
      return_,
    );
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return ((other is GraphQL__Directive_args) &&
            (includeDeprecated == other.includeDeprecated)) &&
        (return_ == other.return_);
  }

  @override
  @useResult
  String toString() {
    return 'GraphQL__Directive_args($return_, includeDeprecated: $includeDeprecated, )';
  }

  @override
  @useResult
  query_string.QueryFieldField toField() {
    return query_string.QueryFieldField(
      'args',
      args: IList([
        query_string.QueryFieldArg(
          name: 'includeDeprecated',
          input: includeDeprecatedToQueryInput(),
        )
      ]),
      description: '',
      return_: query_string.GraphQLOutputTypeConsiderListNull(
        query_string.GraphQLOutputTypeObject(return_),
        graphql_type.ListType.list,
        false,
      ),
    );
  }

  @useResult
  query_string.QueryInput includeDeprecatedToQueryInput() {
    return includeDeprecated.toQueryInput(
      type: const graphql_type.GraphQLType(
        name: 'Boolean',
        isNullable: true,
        listType: graphql_type.ListType.notList,
      ),
      staticValueToQueryInputFunc: (staticValue) {
        return switch (staticValue) {
          null => const query_string.QueryInputNull(),
          final nonNull => query_string.QueryInputBoolean(nonNull),
        };
      },
    );
  }
}

// Generated by simple_dart_code_gen. Do not edit.
// ignore_for_file: camel_case_types, constant_identifier_names, always_use_package_imports
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:meta/meta.dart';
import 'package:narumincho_json/narumincho_json.dart' as narumincho_json;
import 'package:simple_graphql_client_gen/graphql_post.dart' as graphql_post;

import './type.dart' as type;

/// APIを呼ぶ
@immutable
abstract class Api {
  /// APIを呼ぶ
  const Api();

  /// ```
  /// query ($code: AccountCode!) {
  ///   accountByCode(code: $code) {
  ///     id
  ///   }
  /// }
  /// ```
  static Future<QueryAccountByCode> accountByCode(
    Uri url,
    String? auth, {
    required type.AccountCode code,
  }) async {
    final response = await graphql_post.graphQLPost(
      uri: url,
      auth: auth,
      query:
          'query (\$code: AccountCode!) {\n  accountByCode(code: \$code) {\n    id\n  }\n}\n',
      variables: IMap({'code': code.toJsonValue()}),
    );
    final errors = response.errors;
    if (errors != null) {
      throw errors;
    }
    final data = response.data;
    if (data == null) {
      throw Exception('accountByCode response data empty');
    }
    return QueryAccountByCode.fromJsonValue(data);
  }
}

/// definy のアカウント
@immutable
final class Account {
  /// definy のアカウント
  const Account({
    required this.id,
  });
  final type.AccountId id;

  /// `Account` を複製する
  @useResult
  Account copyWith({
    type.AccountId? id,
  }) {
    return Account(id: id ?? this.id);
  }

  /// `Account` のフィールドを変更したものを新しく返す
  @useResult
  Account updateFields({
    type.AccountId Function(type.AccountId prevId)? id,
  }) {
    return Account(id: ((id == null) ? this.id : id(this.id)));
  }

  @override
  @useResult
  int get hashCode {
    return id.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is Account) && (id == other.id);
  }

  @override
  @useResult
  String toString() {
    return 'Account(id: $id, )';
  }

  /// JsonValue から Accountを生成する. 失敗した場合はエラーが発生する
  static Account fromJsonValue(
    narumincho_json.JsonValue value,
  ) {
    return Account(
        id: type.AccountId.fromJsonValue(value.getObjectValueOrThrow('id')));
  }
}

/// データを取得できる. データを取得するのみで, データを変更しない
@immutable
final class QueryAccountByCode {
  /// データを取得できる. データを取得するのみで, データを変更しない
  const QueryAccountByCode({
    required this.accountByCode,
  });
  final Account? accountByCode;

  /// `QueryAccountByCode` を複製する
  @useResult
  QueryAccountByCode copyWith({
    (Account?,)? accountByCode,
  }) {
    return QueryAccountByCode(
        accountByCode:
            ((accountByCode == null) ? this.accountByCode : accountByCode.$1));
  }

  /// `QueryAccountByCode` のフィールドを変更したものを新しく返す
  @useResult
  QueryAccountByCode updateFields({
    Account? Function(Account? prevAccountByCode)? accountByCode,
  }) {
    return QueryAccountByCode(
        accountByCode: ((accountByCode == null)
            ? this.accountByCode
            : accountByCode(this.accountByCode)));
  }

  @override
  @useResult
  int get hashCode {
    return accountByCode.hashCode;
  }

  @override
  @useResult
  bool operator ==(
    Object other,
  ) {
    return (other is QueryAccountByCode) &&
        (accountByCode == other.accountByCode);
  }

  @override
  @useResult
  String toString() {
    return 'QueryAccountByCode(accountByCode: $accountByCode, )';
  }

  /// JsonValue から QueryAccountByCodeを生成する. 失敗した場合はエラーが発生する
  static QueryAccountByCode fromJsonValue(
    narumincho_json.JsonValue value,
  ) {
    return QueryAccountByCode(
        accountByCode: switch (value.getObjectValueOrThrow('accountByCode')) {
      narumincho_json.JsonNull() => null,
      final jsonValue => Account.fromJsonValue(jsonValue),
    });
  }
}

module Test.Main (main) where

import Prelude
import Data.Array.NonEmpty as NonEmptyArray
import Data.Maybe as Maybe
import Data.String.NonEmpty as NonEmptyString
import Data.UInt as UInt
import Effect as Effect
import Effect.Aff (Aff)
import FileSystem.FileType as FileType
import FileSystem.Name as Name
import FileSystem.Path as FileSystemPath
import PureScript.Data as PureScriptData
import PureScript.ToString as PureScriptToString
import PureScript.Wellknown as PureScriptWellknown
import Test.StructuredUrl as StructuredUrlTest
import Test.TypeScript as TypeScriptTest
import Test.Unit as TestUnit
import Test.Unit.Assert as Assert
import Test.Unit.Main as TestUnitMain
import Type.Proxy (Proxy(..))
import Util as Util

main :: Effect.Effect Unit
main =
  TestUnitMain.runTest do
    TestUnit.test "util" do
      listUpdateAtOverAutoCreateInline
      listUpdateAtOverAutoCreateFirst
      listUpdateAtOverAutoCreateLast
      listUpdateAtOverAutoCreateAutoCreate
      groupBySize2
      fileNameParse
      fileNameWithExtensionParse
      pureScriptCodeGenerate
      nonEmptyArrayGetAtLoop
    TestUnit.test "StructuredUrlTest" do
      StructuredUrlTest.test
    TestUnit.test "TypeScriptTest" do
      TypeScriptTest.test

listUpdateAtOverAutoCreateInline :: Aff Unit
listUpdateAtOverAutoCreateInline =
  Assert.equal' "listUpdateAtOverAutoCreateInline"
    ( Util.listUpdateAtOverAutoCreate
        [ "zero", "one", "two", "three" ]
        (UInt.fromInt 1)
        ( case _ of
            Maybe.Just item -> append item "!"
            Maybe.Nothing -> "new"
        )
        "fill"
    )
    [ "zero", "one!", "two", "three" ]

listUpdateAtOverAutoCreateFirst :: Aff Unit
listUpdateAtOverAutoCreateFirst =
  Assert.equal' "listUpdateAtOverAutoCreateFirst"
    ( Util.listUpdateAtOverAutoCreate
        [ "zero", "one", "two", "three" ]
        (UInt.fromInt 0)
        ( case _ of
            Maybe.Just item -> append item "!"
            Maybe.Nothing -> "new"
        )
        "fill"
    )
    [ "zero!", "one", "two", "three" ]

listUpdateAtOverAutoCreateLast :: Aff Unit
listUpdateAtOverAutoCreateLast =
  Assert.equal' "listUpdateAtOverAutoCreateLast"
    ( Util.listUpdateAtOverAutoCreate
        [ "zero", "one", "two", "three" ]
        (UInt.fromInt 3)
        ( case _ of
            Maybe.Just item -> append item "!"
            Maybe.Nothing -> "new"
        )
        "fill"
    )
    [ "zero", "one", "two", "three!" ]

listUpdateAtOverAutoCreateAutoCreate :: Aff Unit
listUpdateAtOverAutoCreateAutoCreate =
  Assert.equal' "listUpdateAtOverAutoCreateAutoCreate"
    ( Util.listUpdateAtOverAutoCreate
        [ "zero", "one", "two", "three" ]
        (UInt.fromInt 6)
        ( case _ of
            Maybe.Just item -> append item "!"
            Maybe.Nothing -> "new"
        )
        "fill"
    )
    [ "zero", "one", "two", "three", "fill", "fill", "new" ]

groupBySize2 :: Aff Unit
groupBySize2 =
  Assert.equal
    (Util.groupBySize (UInt.fromInt 2) [ 0, 1, 2, 3, 4 ])
    [ [ 0, 1 ], [ 2, 3 ], [ 4 ] ]

fileNameParse :: Aff Unit
fileNameParse =
  Assert.equal
    (Name.toNonEmptyString (Name.fromSymbolProxy (Proxy :: _ "sampleFileName")))
    (NonEmptyString.nes (Proxy :: _ "sampleFileName"))

fileNameWithExtensionParse :: Aff Unit
fileNameWithExtensionParse =
  Assert.equal
    (FileSystemPath.fileNameWithExtensionParse "sample.test.js")
    ( Maybe.Just
        { fileName:
            Name.fromSymbolProxy (Proxy :: _ "sample.test")
        , fileType: Maybe.Just FileType.JavaScript
        }
    )

pureScriptCodeGenerate :: Aff Unit
pureScriptCodeGenerate =
  Assert.equal
    ( PureScriptToString.toString
        ( PureScriptData.Module
            { name:
                PureScriptData.ModuleName
                  ( NonEmptyArray.singleton
                      (NonEmptyString.nes (Proxy :: _ "Sample"))
                  )
            , definitionList:
                [ PureScriptWellknown.definition
                    { name: NonEmptyString.nes (Proxy :: _ "origin")
                    , document: "オリジン"
                    , pType: PureScriptWellknown.primString
                    , expr: PureScriptWellknown.stringLiteral "http://narumincho.com"
                    , isExport: true
                    }
                , PureScriptWellknown.definition
                    { name: NonEmptyString.nes (Proxy :: _ "sample")
                    , document: "サンプルデータ\n改行付きのドキュメント"
                    , pType: PureScriptWellknown.primString
                    , expr: PureScriptWellknown.stringLiteral "改行も\nしっかりエスケープされてるかな?"
                    , isExport: false
                    }
                ]
            }
        )
    )
    """-- generated by definy. Do not edit!
module Sample (origin) where

import Prim as M0

-- | オリジン
origin :: M0.String
origin = "http://narumincho.com"

-- | サンプルデータ
-- | 改行付きのドキュメント
sample :: M0.String
sample = "改行も\nしっかりエスケープされてるかな?"

"""

nonEmptyArrayGetAtLoop :: Aff Unit
nonEmptyArrayGetAtLoop = do
  nonEmptyArrayGetAtLoopZero
  nonEmptyArrayGetAtLoopOne
  nonEmptyArrayGetAtLoopLoopOne
  nonEmptyArrayGetAtLoopLoopTwo
  nonEmptyArrayGetAtLoopOneElement

nonEmptyArrayGetAtLoopZero :: Aff Unit
nonEmptyArrayGetAtLoopZero =
  Assert.equal
    ( Util.nonEmptyArrayGetAtLoop
        (NonEmptyArray.cons' "a" [ "b", "c" ])
        (UInt.fromInt 0)
    )
    "a"

nonEmptyArrayGetAtLoopOne :: Aff Unit
nonEmptyArrayGetAtLoopOne =
  Assert.equal
    ( Util.nonEmptyArrayGetAtLoop
        (NonEmptyArray.cons' "a" [ "b", "c" ])
        (UInt.fromInt 1)
    )
    "b"

nonEmptyArrayGetAtLoopLoopOne :: Aff Unit
nonEmptyArrayGetAtLoopLoopOne =
  Assert.equal
    ( Util.nonEmptyArrayGetAtLoop
        (NonEmptyArray.cons' "a" [ "b", "c" ])
        (UInt.fromInt 4)
    )
    "b"

nonEmptyArrayGetAtLoopLoopTwo :: Aff Unit
nonEmptyArrayGetAtLoopLoopTwo =
  Assert.equal
    ( Util.nonEmptyArrayGetAtLoop
        (NonEmptyArray.cons' "a" [ "b", "c" ])
        (UInt.fromInt 6)
    )
    "a"

nonEmptyArrayGetAtLoopOneElement :: Aff Unit
nonEmptyArrayGetAtLoopOneElement =
  Assert.equal
    ( Util.nonEmptyArrayGetAtLoop
        (NonEmptyArray.cons' "a" [])
        (UInt.fromInt 99)
    )
    "a"

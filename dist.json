{"clientJs":{"code":"var D, a, J, C, j, K, $, E = {}, X = [], oe = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i, F = Array.isArray;\nfunction b(e, _) {\n    for(var t in _)e[t] = _[t];\n    return e;\n}\nfunction Y(e) {\n    var _ = e.parentNode;\n    _ && _.removeChild(e);\n}\nfunction re(e, _, t) {\n    var i, o, r, l = {};\n    for(r in _)r == \"key\" ? i = _[r] : r == \"ref\" ? o = _[r] : l[r] = _[r];\n    if (arguments.length > 2 && (l.children = arguments.length > 3 ? D.call(arguments, 2) : t), typeof e == \"function\" && e.defaultProps != null) for(r in e.defaultProps)l[r] === void 0 && (l[r] = e.defaultProps[r]);\n    return S(e, l, i, o, null);\n}\nfunction S(e, _, t, i, o) {\n    var r = {\n        type: e,\n        props: _,\n        key: t,\n        ref: i,\n        __k: null,\n        __: null,\n        __b: 0,\n        __e: null,\n        __d: void 0,\n        __c: null,\n        constructor: void 0,\n        __v: o ?? ++J,\n        __i: -1,\n        __u: 0\n    };\n    return o == null && a.vnode != null && a.vnode(r), r;\n}\nfunction H(e) {\n    return e.children;\n}\nfunction W(e, _) {\n    this.props = e, this.context = _;\n}\nfunction P(e, _) {\n    if (_ == null) return e.__ ? P(e.__, e.__i + 1) : null;\n    for(var t; _ < e.__k.length; _++)if ((t = e.__k[_]) != null && t.__e != null) return t.__e;\n    return typeof e.type == \"function\" ? P(e) : null;\n}\nfunction Z(e) {\n    var _, t;\n    if ((e = e.__) != null && e.__c != null) {\n        for(e.__e = e.__c.base = null, _ = 0; _ < e.__k.length; _++)if ((t = e.__k[_]) != null && t.__e != null) {\n            e.__e = e.__c.base = t.__e;\n            break;\n        }\n        return Z(e);\n    }\n}\nfunction I(e) {\n    (!e.__d && (e.__d = !0) && C.push(e) && !A.__r++ || j !== a.debounceRendering) && ((j = a.debounceRendering) || K)(A);\n}\nfunction A() {\n    var e, _, t, i, o, r, l, s, f;\n    for(C.sort($); e = C.shift();)e.__d && (_ = C.length, i = void 0, r = (o = (t = e).__v).__e, s = [], f = [], (l = t.__P) && ((i = b({}, o)).__v = o.__v + 1, a.vnode && a.vnode(i), B(l, i, o, t.__n, l.ownerSVGElement !== void 0, 32 & o.__u ? [\n        r\n    ] : null, s, r ?? P(o), !!(32 & o.__u), f), i.__.__k[i.__i] = i, te(s, i, f), i.__e != r && Z(i)), C.length > _ && C.sort($));\n    A.__r = 0;\n}\nfunction ee(e, _, t, i, o, r, l, s, f, u, p) {\n    var n, m, c, h, k, v = i && i.__k || X, d = _.length;\n    for(t.__d = f, ie(t, _, v), f = t.__d, n = 0; n < d; n++)(c = t.__k[n]) != null && typeof c != \"boolean\" && typeof c != \"function\" && (m = c.__i === -1 ? E : v[c.__i] || E, c.__i = n, B(e, c, m, o, r, l, s, f, u, p), h = c.__e, c.ref && m.ref != c.ref && (m.ref && O(m.ref, null, c), p.push(c.ref, c.__c || h, c)), k == null && h != null && (k = h), 65536 & c.__u || m.__k === c.__k ? f = _e(c, f, e) : typeof c.type == \"function\" && c.__d !== void 0 ? f = c.__d : h && (f = h.nextSibling), c.__d = void 0, c.__u &= -196609);\n    t.__d = f, t.__e = k;\n}\nfunction ie(e, _, t) {\n    var i, o, r, l, s, f = _.length, u = t.length, p = u, n = 0;\n    for(e.__k = [], i = 0; i < f; i++)(o = e.__k[i] = (o = _[i]) == null || typeof o == \"boolean\" || typeof o == \"function\" ? null : typeof o == \"string\" || typeof o == \"number\" || typeof o == \"bigint\" || o.constructor == String ? S(null, o, null, null, o) : F(o) ? S(H, {\n        children: o\n    }, null, null, null) : o.constructor === void 0 && o.__b > 0 ? S(o.type, o.props, o.key, o.ref ? o.ref : null, o.__v) : o) != null ? (o.__ = e, o.__b = e.__b + 1, s = se(o, t, l = i + n, p), o.__i = s, r = null, s !== -1 && (p--, (r = t[s]) && (r.__u |= 131072)), r == null || r.__v === null ? (s == -1 && n--, typeof o.type != \"function\" && (o.__u |= 65536)) : s !== l && (s === l + 1 ? n++ : s > l ? p > f - l ? n += s - l : n-- : n = s < l && s == l - 1 ? s - l : 0, s !== i + n && (o.__u |= 65536))) : (r = t[i]) && r.key == null && r.__e && (r.__e == e.__d && (e.__d = P(r)), R(r, r, !1), t[i] = null, p--);\n    if (p) for(i = 0; i < u; i++)(r = t[i]) != null && !(131072 & r.__u) && (r.__e == e.__d && (e.__d = P(r)), R(r, r));\n}\nfunction _e(e, _, t) {\n    var i, o;\n    if (typeof e.type == \"function\") {\n        for(i = e.__k, o = 0; i && o < i.length; o++)i[o] && (i[o].__ = e, _ = _e(i[o], _, t));\n        return _;\n    }\n    return e.__e != _ && (t.insertBefore(e.__e, _ || null), _ = e.__e), _ && _.nextSibling;\n}\nfunction se(e, _, t, i) {\n    var o = e.key, r = e.type, l = t - 1, s = t + 1, f = _[t];\n    if (f === null || f && o == f.key && r === f.type) return t;\n    if (i > (f != null && !(131072 & f.__u) ? 1 : 0)) for(; l >= 0 || s < _.length;){\n        if (l >= 0) {\n            if ((f = _[l]) && !(131072 & f.__u) && o == f.key && r === f.type) return l;\n            l--;\n        }\n        if (s < _.length) {\n            if ((f = _[s]) && !(131072 & f.__u) && o == f.key && r === f.type) return s;\n            s++;\n        }\n    }\n    return -1;\n}\nfunction z(e, _, t) {\n    _[0] === \"-\" ? e.setProperty(_, t ?? \"\") : e[_] = t == null ? \"\" : typeof t != \"number\" || oe.test(_) ? t : t + \"px\";\n}\nfunction M(e, _, t, i, o) {\n    var r;\n    e: if (_ === \"style\") if (typeof t == \"string\") e.style.cssText = t;\n    else {\n        if (typeof i == \"string\" && (e.style.cssText = i = \"\"), i) for(_ in i)t && _ in t || z(e.style, _, \"\");\n        if (t) for(_ in t)i && t[_] === i[_] || z(e.style, _, t[_]);\n    }\n    else if (_[0] === \"o\" && _[1] === \"n\") r = _ !== (_ = _.replace(/(PointerCapture)$|Capture$/, \"$1\")), _ = _.toLowerCase() in e ? _.toLowerCase().slice(2) : _.slice(2), e.l || (e.l = {}), e.l[_ + r] = t, t ? i ? t.u = i.u : (t.u = Date.now(), e.addEventListener(_, r ? q : G, r)) : e.removeEventListener(_, r ? q : G, r);\n    else {\n        if (o) _ = _.replace(/xlink(H|:h)/, \"h\").replace(/sName$/, \"s\");\n        else if (_ !== \"width\" && _ !== \"height\" && _ !== \"href\" && _ !== \"list\" && _ !== \"form\" && _ !== \"tabIndex\" && _ !== \"download\" && _ !== \"rowSpan\" && _ !== \"colSpan\" && _ !== \"role\" && _ in e) try {\n            e[_] = t ?? \"\";\n            break e;\n        } catch  {}\n        typeof t == \"function\" || (t == null || t === !1 && _[4] !== \"-\" ? e.removeAttribute(_) : e.setAttribute(_, t));\n    }\n}\nfunction G(e) {\n    var _ = this.l[e.type + !1];\n    if (e.t) {\n        if (e.t <= _.u) return;\n    } else e.t = Date.now();\n    return _(a.event ? a.event(e) : e);\n}\nfunction q(e) {\n    return this.l[e.type + !0](a.event ? a.event(e) : e);\n}\nfunction B(e, _, t, i, o, r, l, s, f, u) {\n    var p, n, m, c, h, k, v, d, y, x, T, w, V, U, N, g = _.type;\n    if (_.constructor !== void 0) return null;\n    128 & t.__u && (f = !!(32 & t.__u), r = [\n        s = _.__e = t.__e\n    ]), (p = a.__b) && p(_);\n    e: if (typeof g == \"function\") try {\n        if (d = _.props, y = (p = g.contextType) && i[p.__c], x = p ? y ? y.props.value : p.__ : i, t.__c ? v = (n = _.__c = t.__c).__ = n.__E : (\"prototype\" in g && g.prototype.render ? _.__c = n = new g(d, x) : (_.__c = n = new W(d, x), n.constructor = g, n.render = ce), y && y.sub(n), n.props = d, n.state || (n.state = {}), n.context = x, n.__n = i, m = n.__d = !0, n.__h = [], n._sb = []), n.__s == null && (n.__s = n.state), g.getDerivedStateFromProps != null && (n.__s == n.state && (n.__s = b({}, n.__s)), b(n.__s, g.getDerivedStateFromProps(d, n.__s))), c = n.props, h = n.state, n.__v = _, m) g.getDerivedStateFromProps == null && n.componentWillMount != null && n.componentWillMount(), n.componentDidMount != null && n.__h.push(n.componentDidMount);\n        else {\n            if (g.getDerivedStateFromProps == null && d !== c && n.componentWillReceiveProps != null && n.componentWillReceiveProps(d, x), !n.__e && (n.shouldComponentUpdate != null && n.shouldComponentUpdate(d, n.__s, x) === !1 || _.__v === t.__v)) {\n                for(_.__v !== t.__v && (n.props = d, n.state = n.__s, n.__d = !1), _.__e = t.__e, _.__k = t.__k, _.__k.forEach(function(L) {\n                    L && (L.__ = _);\n                }), T = 0; T < n._sb.length; T++)n.__h.push(n._sb[T]);\n                n._sb = [], n.__h.length && l.push(n);\n                break e;\n            }\n            n.componentWillUpdate != null && n.componentWillUpdate(d, n.__s, x), n.componentDidUpdate != null && n.__h.push(function() {\n                n.componentDidUpdate(c, h, k);\n            });\n        }\n        if (n.context = x, n.props = d, n.__P = e, n.__e = !1, w = a.__r, V = 0, \"prototype\" in g && g.prototype.render) {\n            for(n.state = n.__s, n.__d = !1, w && w(_), p = n.render(n.props, n.state, n.context), U = 0; U < n._sb.length; U++)n.__h.push(n._sb[U]);\n            n._sb = [];\n        } else do n.__d = !1, w && w(_), p = n.render(n.props, n.state, n.context), n.state = n.__s;\n        while (n.__d && ++V < 25)\n        n.state = n.__s, n.getChildContext != null && (i = b(b({}, i), n.getChildContext())), m || n.getSnapshotBeforeUpdate == null || (k = n.getSnapshotBeforeUpdate(c, h)), ee(e, F(N = p != null && p.type === H && p.key == null ? p.props.children : p) ? N : [\n            N\n        ], _, t, i, o, r, l, s, f, u), n.base = _.__e, _.__u &= -161, n.__h.length && l.push(n), v && (n.__E = n.__ = null);\n    } catch (L) {\n        _.__v = null, f || r != null ? (_.__e = s, _.__u |= f ? 160 : 32, r[r.indexOf(s)] = null) : (_.__e = t.__e, _.__k = t.__k), a.__e(L, _, t);\n    }\n    else r == null && _.__v === t.__v ? (_.__k = t.__k, _.__e = t.__e) : _.__e = ue(t.__e, _, t, i, o, r, l, f, u);\n    (p = a.diffed) && p(_);\n}\nfunction te(e, _, t) {\n    _.__d = void 0;\n    for(var i = 0; i < t.length; i++)O(t[i], t[++i], t[++i]);\n    a.__c && a.__c(_, e), e.some(function(o) {\n        try {\n            e = o.__h, o.__h = [], e.some(function(r) {\n                r.call(o);\n            });\n        } catch (r) {\n            a.__e(r, o.__v);\n        }\n    });\n}\nfunction ue(e, _, t, i, o, r, l, s, f) {\n    var u, p, n, m, c, h, k, v = t.props, d = _.props, y = _.type;\n    if (y === \"svg\" && (o = !0), r != null) {\n        for(u = 0; u < r.length; u++)if ((c = r[u]) && \"setAttribute\" in c == !!y && (y ? c.localName === y : c.nodeType === 3)) {\n            e = c, r[u] = null;\n            break;\n        }\n    }\n    if (e == null) {\n        if (y === null) return document.createTextNode(d);\n        e = o ? document.createElementNS(\"http://www.w3.org/2000/svg\", y) : document.createElement(y, d.is && d), r = null, s = !1;\n    }\n    if (y === null) v === d || s && e.data === d || (e.data = d);\n    else {\n        if (r = r && D.call(e.childNodes), v = t.props || E, !s && r != null) for(v = {}, u = 0; u < e.attributes.length; u++)v[(c = e.attributes[u]).name] = c.value;\n        for(u in v)c = v[u], u == \"children\" || (u == \"dangerouslySetInnerHTML\" ? n = c : u === \"key\" || u in d || M(e, u, null, c, o));\n        for(u in d)c = d[u], u == \"children\" ? m = c : u == \"dangerouslySetInnerHTML\" ? p = c : u == \"value\" ? h = c : u == \"checked\" ? k = c : u === \"key\" || s && typeof c != \"function\" || v[u] === c || M(e, u, c, v[u], o);\n        if (p) s || n && (p.__html === n.__html || p.__html === e.innerHTML) || (e.innerHTML = p.__html), _.__k = [];\n        else if (n && (e.innerHTML = \"\"), ee(e, F(m) ? m : [\n            m\n        ], _, t, i, o && y !== \"foreignObject\", r, l, r ? r[0] : t.__k && P(t, 0), s, f), r != null) for(u = r.length; u--;)r[u] != null && Y(r[u]);\n        s || (u = \"value\", h !== void 0 && (h !== e[u] || y === \"progress\" && !h || y === \"option\" && h !== v[u]) && M(e, u, h, v[u], !1), u = \"checked\", k !== void 0 && k !== e[u] && M(e, u, k, v[u], !1));\n    }\n    return e;\n}\nfunction O(e, _, t) {\n    try {\n        typeof e == \"function\" ? e(_) : e.current = _;\n    } catch (i) {\n        a.__e(i, t);\n    }\n}\nfunction R(e, _, t) {\n    var i, o;\n    if (a.unmount && a.unmount(e), (i = e.ref) && (i.current && i.current !== e.__e || O(i, null, _)), (i = e.__c) != null) {\n        if (i.componentWillUnmount) try {\n            i.componentWillUnmount();\n        } catch (r) {\n            a.__e(r, _);\n        }\n        i.base = i.__P = null, e.__c = void 0;\n    }\n    if (i = e.__k) for(o = 0; o < i.length; o++)i[o] && R(i[o], _, t || typeof e.type != \"function\");\n    t || e.__e == null || Y(e.__e), e.__ = e.__e = e.__d = void 0;\n}\nfunction ce(e, _, t) {\n    return this.constructor(e, t);\n}\nfunction fe(e, _, t) {\n    var i, o, r, l;\n    a.__ && a.__(e, _), o = (i = typeof t == \"function\") ? null : t && t.__k || _.__k, r = [], l = [], B(_, e = (!i && t || _).__k = re(H, null, [\n        e\n    ]), o || E, E, _.ownerSVGElement !== void 0, !i && t ? [\n        t\n    ] : o ? null : _.firstChild ? D.call(_.childNodes) : null, r, !i && t ? t : o ? o.__e : _.firstChild, i, l), te(r, e, l);\n}\nfunction pe(e, _) {\n    fe(e, _, pe);\n}\nD = X.slice, a = {\n    __e: function(e, _, t, i) {\n        for(var o, r, l; _ = _.__;)if ((o = _.__c) && !o.__) try {\n            if ((r = o.constructor) && r.getDerivedStateFromError != null && (o.setState(r.getDerivedStateFromError(e)), l = o.__d), o.componentDidCatch != null && (o.componentDidCatch(e, i || {}), l = o.__d), l) return o.__E = o;\n        } catch (s) {\n            e = s;\n        }\n        throw e;\n    }\n}, J = 0, W.prototype.setState = function(e, _) {\n    var t;\n    t = this.__s != null && this.__s !== this.state ? this.__s : this.__s = b({}, this.state), typeof e == \"function\" && (e = e(b({}, t), this.props)), e && b(t, e), e != null && this.__v && (_ && this._sb.push(_), I(this));\n}, W.prototype.forceUpdate = function(e) {\n    this.__v && (this.__e = !0, e && this.__h.push(e), I(this));\n}, W.prototype.render = H, C = [], K = typeof Promise == \"function\" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, $ = function(e, _) {\n    return e.__v.__b - _.__v.__b;\n}, A.__r = 0, 0;\nvar c, o, H1, b1, v = 0, x = [], p = [], g = a.__b, A1 = a.__r, C1 = a.diffed, F1 = a.__c, q1 = a.unmount;\nfunction l(_, n) {\n    a.__h && a.__h(o, _, v || n), v = 0;\n    var u = o.__H || (o.__H = {\n        __: [],\n        __h: []\n    });\n    return _ >= u.__.length && u.__.push({\n        __V: p\n    }), u.__[_];\n}\nfunction k(_) {\n    return v = 1, B1(U, _);\n}\nfunction B1(_, n, u) {\n    var t = l(c++, 2);\n    if (t.t = _, !t.__c && (t.__ = [\n        u ? u(n) : U(void 0, n),\n        function(a) {\n            var f = t.__N ? t.__N[0] : t.__[0], s = t.t(f, a);\n            f !== s && (t.__N = [\n                s,\n                t.__[1]\n            ], t.__c.setState({}));\n        }\n    ], t.__c = o, !o.u)) {\n        var i = function(a, f, s) {\n            if (!t.__c.__H) return !0;\n            var m = t.__c.__H.__.filter(function(e) {\n                return e.__c;\n            });\n            if (m.every(function(e) {\n                return !e.__N;\n            })) return !h || h.call(this, a, f, s);\n            var V = !1;\n            return m.forEach(function(e) {\n                if (e.__N) {\n                    var P = e.__[0];\n                    e.__ = e.__N, e.__N = void 0, P !== e.__[0] && (V = !0);\n                }\n            }), !(!V && t.__c.props === a) && (!h || h.call(this, a, f, s));\n        };\n        o.u = !0;\n        var h = o.shouldComponentUpdate, N = o.componentWillUpdate;\n        o.componentWillUpdate = function(a, f, s) {\n            if (this.__e) {\n                var m = h;\n                h = void 0, i(a, f, s), h = m;\n            }\n            N && N.call(this, a, f, s);\n        }, o.shouldComponentUpdate = i;\n    }\n    return t.__N || t.__;\n}\nfunction j1(_, n) {\n    var u = l(c++, 3);\n    !a.__s && y(u.__H, n) && (u.__ = _, u.i = n, o.__H.__h.push(u));\n}\nfunction R1() {\n    for(var _; _ = x.shift();)if (_.__P && _.__H) try {\n        _.__H.__h.forEach(d), _.__H.__h.forEach(E1), _.__H.__h = [];\n    } catch (n) {\n        _.__H.__h = [], a.__e(n, _.__v);\n    }\n}\na.__b = function(_) {\n    o = null, g && g(_);\n}, a.__r = function(_) {\n    A1 && A1(_), c = 0;\n    var n = (o = _.__c).__H;\n    n && (H1 === o ? (n.__h = [], o.__h = [], n.__.forEach(function(u) {\n        u.__N && (u.__ = u.__N), u.__V = p, u.__N = u.i = void 0;\n    })) : (n.__h.forEach(d), n.__h.forEach(E1), n.__h = [], c = 0)), H1 = o;\n}, a.diffed = function(_) {\n    C1 && C1(_);\n    var n = _.__c;\n    n && n.__H && (n.__H.__h.length && (x.push(n) !== 1 && b1 === a.requestAnimationFrame || ((b1 = a.requestAnimationFrame) || S1)(R1)), n.__H.__.forEach(function(u) {\n        u.i && (u.__H = u.i), u.__V !== p && (u.__ = u.__V), u.i = void 0, u.__V = p;\n    })), H1 = o = null;\n}, a.__c = function(_, n) {\n    n.some(function(u) {\n        try {\n            u.__h.forEach(d), u.__h = u.__h.filter(function(t) {\n                return !t.__ || E1(t);\n            });\n        } catch (t) {\n            n.some(function(i) {\n                i.__h && (i.__h = []);\n            }), n = [], a.__e(t, u.__v);\n        }\n    }), F1 && F1(_, n);\n}, a.unmount = function(_) {\n    q1 && q1(_);\n    var n, u = _.__c;\n    u && u.__H && (u.__H.__.forEach(function(t) {\n        try {\n            d(t);\n        } catch (i) {\n            n = i;\n        }\n    }), u.__H = void 0, n && a.__e(n, u.__v));\n};\nvar D1 = typeof requestAnimationFrame == \"function\";\nfunction S1(_) {\n    var n, u = function() {\n        clearTimeout(t), D1 && cancelAnimationFrame(n), setTimeout(_);\n    }, t = setTimeout(u, 100);\n    D1 && (n = requestAnimationFrame(u));\n}\nfunction d(_) {\n    var n = o, u = _.__c;\n    typeof u == \"function\" && (_.__c = void 0, u()), o = n;\n}\nfunction E1(_) {\n    var n = o;\n    _.__c = _.__(), o = n;\n}\nfunction y(_, n) {\n    return !_ || _.length !== n.length || n.some(function(u, t) {\n        return u !== _[t];\n    });\n}\nfunction U(_, n) {\n    return typeof n == \"function\" ? n(_) : n;\n}\nconst pathAndQueryFromUrl = (url)=>{\n    return {\n        pathSegments: url.pathname.split(\"/\").filter((segment)=>segment.length > 0),\n        query: new Map([\n            ...url.searchParams\n        ])\n    };\n};\nconst pathAndQueryToPathAndQueryString = (pathAndQuery)=>{\n    return \"/\" + pathAndQuery.pathSegments.join(\"/\") + (pathAndQuery.query.size > 0 ? \"?\" + new URLSearchParams([\n        ...pathAndQuery.query\n    ]) : \"\");\n};\nconst locationFromPathAndQuery = (pathAndQuery)=>{\n    if (pathAndQuery.pathSegments.length === 0) {\n        return {\n            type: \"top\",\n            hl: searchQueryValueToLanguage(pathAndQuery.query.get(\"hl\"))\n        };\n    }\n    const segment0 = pathAndQuery.pathSegments[0];\n    if (segment0 === \"about\") {\n        return {\n            type: \"about\",\n            hl: searchQueryValueToLanguage(pathAndQuery.query.get(\"hl\"))\n        };\n    }\n    if (segment0 === \"expr\") {\n        return {\n            type: \"expr\",\n            hl: searchQueryValueToLanguage(pathAndQuery.query.get(\"hl\")),\n            expr: pathAndQuery.query.get(\"expr\") ?? \"\"\n        };\n    }\n    if (segment0 === \"file\") {\n        return {\n            type: \"file\",\n            hash: pathAndQuery.pathSegments?.[1] ?? \"\"\n        };\n    }\n    if (segment0 === \"graphql\") {\n        return {\n            type: \"graphql\"\n        };\n    }\n    const idMatchResult = segment0?.match(/[0-9a-f]{32}/u);\n    if (idMatchResult) {\n        return {\n            type: \"id\",\n            hl: searchQueryValueToLanguage(pathAndQuery.query.get(\"hl\")),\n            id: idMatchResult[0]\n        };\n    }\n    return {\n        type: \"top\",\n        hl: searchQueryValueToLanguage(pathAndQuery.query.get(\"hl\"))\n    };\n};\nconst searchQueryValueToLanguage = (hlValue)=>{\n    switch(hlValue){\n        case \"en\":\n            return \"en\";\n        case \"eo\":\n            return \"eo\";\n        case \"ja\":\n            return \"ja\";\n        default:\n            return \"en\";\n    }\n};\nconst locationToPathAndQuery = (location)=>{\n    switch(location.type){\n        case \"top\":\n            return {\n                pathSegments: [\n                    \"top\"\n                ],\n                query: new Map([\n                    [\n                        \"hl\",\n                        location.hl\n                    ]\n                ])\n            };\n        case \"about\":\n            return {\n                pathSegments: [\n                    \"about\"\n                ],\n                query: new Map([\n                    [\n                        \"hl\",\n                        location.hl\n                    ]\n                ])\n            };\n        case \"expr\":\n            return {\n                pathSegments: [\n                    \"expr\"\n                ],\n                query: new Map([\n                    [\n                        \"hl\",\n                        location.hl\n                    ],\n                    [\n                        \"expr\",\n                        location.expr\n                    ]\n                ])\n            };\n        case \"id\":\n            return {\n                pathSegments: [\n                    location.id\n                ],\n                query: new Map([\n                    [\n                        \"hl\",\n                        location.hl\n                    ]\n                ])\n            };\n        case \"file\":\n            return {\n                pathSegments: [\n                    \"file\",\n                    location.hash\n                ],\n                query: new Map()\n            };\n        case \"graphql\":\n            return {\n                pathSegments: [\n                    \"graphql\"\n                ],\n                query: new Map()\n            };\n    }\n};\nconst LogInStateView = (props)=>{\n    return re(\"div\", {}, `ログイン状態は ${JSON.stringify(props.logInState)}`);\n};\nconst Link = (props)=>{\n    return re(\"a\", {\n        href: pathAndQueryToPathAndQueryString(locationToPathAndQuery(props.location)),\n        onClick: (e)=>{\n            if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {\n                return;\n            }\n            e.preventDefault();\n            props.onLocationMove(props.location);\n        },\n        ...props.removeUnderline ? {\n            \"style\": \"text-decoration:none\"\n        } : {}\n    }, props.children);\n};\nconst Header = (props)=>{\n    return re(\"header\", {\n        style: \"background: #333;display: flex\"\n    }, re(Link, {\n        location: {\n            type: \"top\",\n            hl: props.hl\n        },\n        removeUnderline: true,\n        onLocationMove: props.onLocationMove,\n        children: re(\"h2\", {\n            style: \"font-family:'Hack';font-size:32px;font-weight: normal;color: #b9d09b;margin:0;line-height:1;padding:8px\"\n        }, \"definy\")\n    }), re(\"div\", {\n        style: \"flex-grow:1\"\n    }), re(LogInStateView, {\n        logInState: props.logInState\n    }));\n};\nconst Top = (props)=>{\n    return re(\"div\", {}, re(Header, {\n        logInState: props.logInState,\n        hl: props.hl,\n        onLocationMove: props.onLocationMove\n    }), re(\"div\", {}, `ここはトップページ. 最近投稿されたアイデアなどを表示したい hl=${props.hl}`), re(Link, {\n        location: {\n            type: \"about\",\n            hl: props.hl\n        },\n        onLocationMove: props.onLocationMove,\n        children: \"about\"\n    }), re(\"button\", {\n        onClick: props.onClickCreateIdea\n    }, \"アイデアを投稿する (仮)\"));\n};\nconst LanguageDropdown = (props)=>{\n    return re(\"div\", {\n        style: `position:relative`\n    }, re(\"div\", {\n        style: `position:relative`,\n        onClick: ()=>{\n            props.setIsOpen(!props.isOpen);\n        }\n    }, re(IconLanguage, {}), languageToName[props.hl] + \" \" + (props.isOpen ? \"▲\" : \"▼\")), ...props.isOpen ? [\n        re(\"div\", {}, [\n            \"en\",\n            \"eo\",\n            \"ja\"\n        ].map((hl)=>{\n            if (hl === props.hl) {\n                return re(\"div\", {}, languageToName[hl]);\n            }\n            return re(\"div\", {}, re(Link, {\n                location: props.locationFunc(hl),\n                onLocationMove: props.onLocationMove,\n                children: languageToName[hl],\n                key: hl\n            }));\n        }))\n    ] : []);\n};\nconst languageToName = {\n    en: \"English\",\n    eo: \"Esperanto\",\n    ja: \"日本語\"\n};\nconst IconLanguage = ({ size = 24, color = \"currentColor\", stroke = 2 })=>re(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        class: \"icon icon-tabler icon-tabler-language\",\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        \"stroke-width\": stroke,\n        stroke: color,\n        fill: \"none\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }, re(\"path\", {\n        stroke: \"none\",\n        d: \"M0 0h24v24H0z\",\n        fill: \"none\"\n    }), re(\"path\", {\n        d: \"M4 5h7\"\n    }), re(\"path\", {\n        d: \"M9 3v2c0 4.418 -2.239 8 -5 8\"\n    }), re(\"path\", {\n        d: \"M5 9c0 2.144 2.952 3.908 6.7 4\"\n    }), re(\"path\", {\n        d: \"M12 20l4 -9l4 9\"\n    }), re(\"path\", {\n        d: \"M19.1 18h-6.2\"\n    }));\nconst About = (props)=>{\n    return re(\"div\", {}, re(Header, {\n        logInState: props.logInState,\n        hl: props.hl,\n        onLocationMove: props.onLocationMove\n    }), re(\"div\", {\n        style: \"padding:8px\"\n    }, re(\"div\", {\n        style: \"display:flex\"\n    }, re(\"h1\", {}, {\n        en: \"About definy\",\n        eo: \"Pri definy\",\n        ja: \"definy について\"\n    }[props.hl]), re(\"div\", {\n        style: \"flex-grow:1\"\n    }), re(LanguageDropdown, {\n        hl: props.hl,\n        onLocationMove: props.onLocationMove,\n        locationFunc: (hl)=>({\n                type: \"about\",\n                hl\n            }),\n        isOpen: props.languageDropdownIsOpen,\n        setIsOpen: props.onSetLanguageDropdownIsOpen\n    })), re(\"div\", {}, {\n        en: `\"Programming language + development environment that is not limited to strings\" being developed by Narumincho. Under development...`,\n        eo: `\"Programlingvo + disvolva medio kiu ne estas limigita al ŝnuroj\" disvolvata de Narumincho. Sub evoluo...`,\n        ja: \"ナルミンチョが開発している「文字列にとらわれないプログラミング言語+開発環境」. 開発中...\"\n    }[props.hl]), re(\"div\", {}, re(\"a\", {\n        href: \"https://github.com/narumincho/definy\"\n    }, \"GitHub\")), re(\"h2\", {}, {\n        en: \"License\",\n        eo: \"Permesilo\",\n        ja: \"ライセンス\"\n    }[props.hl]), re(\"div\", {}, re(\"span\", {}, \"Hack typeface \"), re(\"a\", {\n        href: \"https://github.com/source-foundry/Hack\"\n    }, \"https://github.com/source-foundry/Hack\"))));\n};\nconst ExprPage = (props)=>{\n    return re(\"div\", {}, `ここは式とその結果を共有するときに使うページ. 1+1=2とかね. 画像の加工とか. 式はqueryにデータ実体を含める. hl=${props.hl}`);\n};\nconst IdPage = (props)=>{\n    return re(\"div\", {}, `ここはアイデア/アカウント/モジュール/パーツの詳細ページや編集など hl=${props.hl}`);\n};\nconst App = (props)=>{\n    switch(props.location.type){\n        case \"top\":\n            return re(Top, {\n                hl: props.location.hl,\n                logInState: props.logInState,\n                onClickCreateIdea: props.onClickCreateIdea,\n                onLocationMove: props.onLocationMove\n            });\n        case \"about\":\n            return re(About, {\n                hl: props.location.hl,\n                logInState: props.logInState,\n                onLocationMove: props.onLocationMove,\n                languageDropdownIsOpen: props.languageDropdownIsOpen,\n                onSetLanguageDropdownIsOpen: props.onSetLanguageDropdownIsOpen\n            });\n        case \"expr\":\n            return re(ExprPage, {\n                hl: props.location.hl,\n                expr: props.location.expr\n            });\n        case \"id\":\n            return re(IdPage, {\n                hl: props.location.hl,\n                id: props.location.id\n            });\n        case \"file\":\n        case \"graphql\":\n            return re(\"div\", {}, \"これは表示されないはず....\");\n    }\n};\nconst appElement = document.getElementById(\"app\");\nif (appElement === null) {\n    throw new Error(\"appElement not found\");\n}\nconst propsValue = appElement.dataset[\"props\"];\nif (propsValue === undefined) {\n    throw new Error(\"data-props not found\");\n}\nconst props = JSON.parse(propsValue);\nconst AppWithState = ()=>{\n    const [location, setLocation] = k(props.location);\n    const [languageDropdownIsOpen, setIsOpenLanguageDropdown] = k(false);\n    j1(()=>{\n        addEventListener(\"popstate\", (e)=>{\n            const location = locationFromPathAndQuery(pathAndQueryFromUrl(new URL(window.location.href)));\n            if (location === undefined) {\n                console.warn(\"location is undefined\");\n                e.preventDefault();\n                return;\n            }\n            setLocation(location);\n        });\n    });\n    return re(App, {\n        location,\n        logInState: {\n            type: \"loading\"\n        },\n        onClickCreateIdea: ()=>{\n            console.log(\"click\");\n        },\n        languageDropdownIsOpen,\n        onSetLanguageDropdownIsOpen: (isOpen)=>{\n            setIsOpenLanguageDropdown(isOpen);\n        },\n        onLocationMove: (location)=>{\n            setLocation(location);\n            history.pushState({}, \"\", pathAndQueryToPathAndQueryString(locationToPathAndQuery(location)));\n        }\n    });\n};\npe(re(AppWithState, {}), appElement);\nconsole.log(\"client.ts\");\n","hash":"c08578004ede3237ec202c64b3a9acbde67bd5ebbd3c4a81f658794b840c834b"},"icon":{"base64":"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","hash":"e1254cf71f95643d991eeb935c95934416ea7676c558f1f4fc6f69a4a26f586a"},"font":{"base64":"","hash":"4b288c48e41aed70b7007b9db4932427712b0a51283e88e5e145e0d3ac63e96f"}}
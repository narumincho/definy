/* eslint-disable */
/* generated by definy. Do not edit! */

import * as a from "https://raw.githubusercontent.com/narumincho/definy/f662850e6a0cb9ec7a69e60f424624c07dd417fa/deno-lib/definyRpc/core/coreType.ts";
import * as b from "https://raw.githubusercontent.com/narumincho/definy/f662850e6a0cb9ec7a69e60f424624c07dd417fa/deno-lib/definyRpc/core/request.ts";

/**
 * ログインコールバック時にURLにつけられる code と state
 */
export type CodeAndState = {
  /**
   * 毎回発行されるキー. Google から情報を得るために必要
   */
  readonly code: string;
  /**
   * このサーバーが発行したものか判別するためのキー
   */
  readonly state: string;
  readonly [Symbol.toStringTag]: "main.CodeAndState";
};

/**
 * ログインコールバック時にURLにつけられる code と state
 */
export const CodeAndState: {
  /**
   * CodeAndState の型
   */
  readonly type: () => a.Type<CodeAndState>;
  /**
   * オブジェクトから作成する. 余計なフィールドがレスポンスに含まれてしまうのを防ぐ. 型のチェックはしない
   */
  readonly from: (
    a: globalThis.Omit<CodeAndState, typeof Symbol.toStringTag>
  ) => CodeAndState;
} = {
  type: (): a.Type<CodeAndState> =>
    a.Type.from({
      namespace: a.Namespace.local(["main"]),
      name: "CodeAndState",
      parameters: [],
    }),
  from: (
    obj: globalThis.Omit<CodeAndState, typeof Symbol.toStringTag>
  ): CodeAndState => ({
    code: obj.code,
    state: obj.state,
    [Symbol.toStringTag]: "main.CodeAndState",
  }),
};

/**
 * hello と挨拶が返ってくる
 */
export const hello = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2528")
   */
  readonly url?: globalThis.URL | undefined;
  readonly input: string;
}): globalThis.Promise<a.Result<string, string>> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2528"),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "hello",
    inputType: a.String.type(),
    outputType: a.String.type(),
    input: parameter.input,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
    ]),
  });

/**
 * 現在時刻を文字列で返す
 */
export const now = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2528")
   */
  readonly url?: globalThis.URL | undefined;
  readonly input: string;
}): globalThis.Promise<a.Result<string, string>> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2528"),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "now",
    inputType: a.String.type(),
    outputType: a.String.type(),
    input: parameter.input,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
    ]),
  });

/**
 * Google でログインするためのURLを発行し取得する
 */
export const createGoogleLogInUrl = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2528")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, string>> =>
  b.requestMutation({
    url: parameter.url ?? new globalThis.URL("http://localhost:2528"),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "createGoogleLogInUrl",
    inputType: a.Unit.type(),
    outputType: a.String.type(),
    input: undefined,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
      [
        "*coreType.Unit",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Unit",
          description: "値が1つだけ",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.unit,
        }),
      ],
    ]),
  });

/**
 * logInCallback にやってきたときにパラメーターから得ることができる code と state を使ってログインする
 */
export const logInByCodeAndState = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2528")
   */
  readonly url?: globalThis.URL | undefined;
  readonly input: CodeAndState;
}): globalThis.Promise<a.Result<string, string>> =>
  b.requestMutation({
    url: parameter.url ?? new globalThis.URL("http://localhost:2528"),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "logInByCodeAndState",
    inputType: CodeAndState.type(),
    outputType: a.String.type(),
    input: parameter.input,
    typeMap: new Map([
      [
        "main.CodeAndState",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.local(["main"]),
          name: "CodeAndState",
          description: "ログインコールバック時にURLにつけられる code と state",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.product([
            a.Field.from({
              name: "code",
              description:
                "毎回発行されるキー. Google から情報を得るために必要",
              type: a.String.type(),
            }),
            a.Field.from({
              name: "state",
              description: "このサーバーが発行したものか判別するためのキー",
              type: a.String.type(),
            }),
          ]),
        }),
      ],
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
    ]),
  });

/**
 * fauna からデータを取得する
 */
export const getDataFromDatabase = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2528")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, string>> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2528"),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "getDataFromDatabase",
    inputType: a.Unit.type(),
    outputType: a.String.type(),
    input: undefined,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
      [
        "*coreType.Unit",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Unit",
          description: "値が1つだけ",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.unit,
        }),
      ],
    ]),
  });

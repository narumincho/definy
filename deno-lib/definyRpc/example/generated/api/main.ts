/* eslint-disable */
/* generated by definy. Do not edit! */

import * as a from "https://raw.githubusercontent.com/narumincho/definy/aaa899eaa65c13b6eabb9f3f28bc2e01e1f04009/deno-lib/definyRpc/core/coreType.ts";
import * as b from "https://raw.githubusercontent.com/narumincho/definy/aaa899eaa65c13b6eabb9f3f28bc2e01e1f04009/deno-lib/definyRpc/core/request.ts";

/**
 * hello と挨拶が返ってくる
 */
export const hello = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "hello",
    inputType: a.Unit.type(),
    outputType: a.String.type(),
    input: undefined,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
      [
        "*coreType.Unit",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Unit",
          description: "値が1つだけ",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.unit,
        }),
      ],
    ]),
  });

/**
 * 現在時刻を文字列で返す
 */
export const now = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "now",
    inputType: a.Unit.type(),
    outputType: a.String.type(),
    input: undefined,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
      [
        "*coreType.Unit",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Unit",
          description: "値が1つだけ",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.unit,
        }),
      ],
    ]),
  });

/**
 * "ok"を指定した回数分繰り返して返す
 */
export const repeat = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
  readonly input: number;
}): globalThis.Promise<a.Result<string, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "repeat",
    inputType: a.Number.type(),
    outputType: a.String.type(),
    input: parameter.input,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
      [
        "*coreType.Number",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Number",
          description: "64bit 浮動小数点数",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.number,
        }),
      ],
    ]),
  });

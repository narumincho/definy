/* eslint-disable */
/* generated by definy. Do not edit! */

import * as a from "https://raw.githubusercontent.com/narumincho/definy/d6d8ab20628f332bb6c07c445d4159d86261eb81/deno-lib/definyRpc/core/maybe.ts";
import * as b from "https://raw.githubusercontent.com/narumincho/definy/d6d8ab20628f332bb6c07c445d4159d86261eb81/deno-lib/definyRpc/core/request.ts";
import * as c from "https://raw.githubusercontent.com/narumincho/definy/d6d8ab20628f332bb6c07c445d4159d86261eb81/deno-lib/definyRpc/core/coreType.ts";

/**
 * hello と挨拶が返ってくる
 */
export const hello = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.local(["main"]),
    name: "hello",
    inputType: c.Unit.type(),
    outputType: c.String.type(),
    input: undefined,
    typeMap: new Map([]),
  });

/**
 * 現在時刻を文字列で返す
 */
export const now = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.local(["main"]),
    name: "now",
    inputType: c.Unit.type(),
    outputType: c.String.type(),
    input: undefined,
    typeMap: new Map([]),
  });

/**
 * "ok"を指定した回数分繰り返して返す
 */
export const repeat = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
  readonly input: number;
}): globalThis.Promise<a.Result<string, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.local(["main"]),
    name: "repeat",
    inputType: c.Number.type(),
    outputType: c.String.type(),
    input: parameter.input,
    typeMap: new Map([]),
  });

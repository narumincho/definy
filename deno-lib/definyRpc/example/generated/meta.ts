/* eslint-disable */
/* generated by definy. Do not edit! */

import * as a from "https://raw.githubusercontent.com/narumincho/definy/d6d8ab20628f332bb6c07c445d4159d86261eb81/deno-lib/definyRpc/core/maybe.ts";
import * as b from "https://raw.githubusercontent.com/narumincho/definy/d6d8ab20628f332bb6c07c445d4159d86261eb81/deno-lib/definyRpc/core/request.ts";
import * as c from "https://raw.githubusercontent.com/narumincho/definy/d6d8ab20628f332bb6c07c445d4159d86261eb81/deno-lib/definyRpc/core/coreType.ts";

/**
 * 認証が必要なリクエストに使用する
 */
export type AccountToken = string & { readonly __accountTokenBland: never };

/**
 * サーバー名の取得
 */
export const name = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.meta,
    name: "name",
    inputType: c.Unit.type(),
    outputType: c.String.type(),
    input: undefined,
    typeMap: new Map([]),
  });

/**
 * get namespace list. namespace は API の公開非公開, コード生成のモジュールを分けるチャンク. JavaScriptのSetの仕様上, オブジェクトのSetはうまく扱えないので List にしている
 */
export const namespaceList = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<
  a.Result<globalThis.ReadonlyArray<FunctionNamespace>, "error">
> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.meta,
    name: "namespaceList",
    inputType: c.Unit.type(),
    outputType: c.List.type(c.FunctionNamespace.type()),
    input: undefined,
    typeMap: new Map([]),
  });

/**
 * 名前から関数を検索する (公開APIのみ)
 */
export const functionListByName = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<
  a.Result<globalThis.ReadonlyArray<FunctionDetail>, "error">
> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.meta,
    name: "functionListByName",
    inputType: c.Unit.type(),
    outputType: c.List.type(c.FunctionDetail.type()),
    input: undefined,
    typeMap: new Map([]),
  });

/**
 * 名前から関数を検索する (非公開API)
 */
export const functionListByNamePrivate = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
  readonly accountToken: AccountToken;
}): globalThis.Promise<
  a.Result<globalThis.ReadonlyArray<FunctionDetail>, "error">
> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.meta,
    name: "functionListByNamePrivate",
    inputType: c.Unit.type(),
    outputType: c.List.type(c.FunctionDetail.type()),
    input: undefined,
    typeMap: new Map([]),
    accountToken: parameter.accountToken,
  });

/**
 * 名前空間「definyRpc」のApiFunctionを呼ぶ TypeScript のコードを生成する
 */
export const generateCallDefinyRpcTypeScriptCode = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.meta,
    name: "generateCallDefinyRpcTypeScriptCode",
    inputType: c.Unit.type(),
    outputType: c.String.type(),
    input: undefined,
    typeMap: new Map([]),
  });

/**
 * サーバーが実行している環境でコードを生成し, ファイルとして保存する.
 *  保存先:file:///C:/Users/narum/Documents/GitHub/definy/deno-lib/definyRpc/example/generated/
 */
export const generateCodeAndWriteAsFileInServer = (parameter: {
  /**
   * api end point
   * @default new URL("http://localhost:2520")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<undefined, "error">> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://localhost:2520"),
    namespace: c.FunctionNamespace.meta,
    name: "generateCodeAndWriteAsFileInServer",
    inputType: c.Unit.type(),
    outputType: c.Unit.type(),
    input: undefined,
    typeMap: new Map([]),
  });
